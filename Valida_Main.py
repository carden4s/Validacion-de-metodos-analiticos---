import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st
from io import BytesIO
from pathlib import Path
from datetime import datetime
from scipy.stats import linregress, f_oneway, t, ttest_1samp
from scipy import stats
from statsmodels.stats.multicomp import pairwise_tukeyhsd
from statsmodels.formula.api import ols
from statsmodels.stats.anova import anova_lm
from reportlab.lib.pagesizes import letter, inch
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image as RLImage
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib import colors
from sklearn.linear_model import LinearRegression
from patsy import dmatrices
from statsmodels.stats.outliers_influence import OLSInfluence
from statsmodels.stats.stattools import durbin_watson 
from sklearn.cluster import KMeans
import pytz
import statsmodels.api as sm


# Obtener la ruta del directorio actual
current_dir = Path(__file__).parent if "__file__" in locals() else Path.cwd()
imagenes_dir = current_dir / "img"

# Page Configuration
st.set_page_config(
    page_title="Validaci√≥n De M√©todos Anal√≠ticos",
    page_icon="https://upload.wikimedia.org/wikipedia/commons/thumb/6/68/Escudo_CUCEI.svg/424px-Escudo_CUCEI.svg.png",
    layout="wide"  # Centers all content
)
st.markdown(
    """
    <style>
    body {
        background-color: black;
        color: white;
    }
    </style>
    """,
    unsafe_allow_html=True
)

# Custom CSS for title and footer
st.markdown("""
    <style>
    /* Title container styling */
    .title-container {
        display: flex;
        justify-content: space-between; /* Extend the title container across the full width */
        align-items: center;
        gap: 10px;
        margin-bottom: 20px; /* Spacing below title */
        width: 100%;
    }
    .title-container img:first-child {
        width: 120px; /* Adjust first icon size */
        height: auto;
    }
    .title-container h1 {
        flex: 1;
        text-align: center;
        margin: 0;
    }
    .title-container img:last-child {
        width: 200px; /* Adjust second icon size */
        height: auto;
    }

    /* Footer styling */
    .footer {
        position: fixed;
        bottom: 0;
        left: 0;
        width: 100%;
        background-color: rgba(0, 0, 0, 0.05); /* Light background */
        color: gray;
        text-align: center;
        padding: 5px 15px;
        font-size: small;
        opacity: 0.8;
    }
    </style>
""", unsafe_allow_html=True)

# Title with Icon
st.markdown("""
    <div class="title-container">
        <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/5f/Escudo_UdeG.svg/662px-Escudo_UdeG.svg.png" alt="UDG Logo">
        <h1>Validaci√≥n de M√©todos Anal√≠ticos</h1>
        <img src="https://practicas.cucei.udg.mx/dist/imagenes/logo_cucei_blanco.png" alt="CUCEI Logo">
    </div>
""", unsafe_allow_html=True)

# Footer
st.markdown("""
    <div class="footer">
        2025 - Luis Angel Cardenas Medina
    </div>
""", unsafe_allow_html=True)


# M√≥dulos disponibles
modulo = st.sidebar.selectbox(
    "Selecciona el m√≥dulo de an√°lisis:",
    [
        "Linealidad y Rango",
        "L√≠mites de Detecci√≥n y Cuantificaci√≥n",
        "Exactitud (Recuperaci√≥n)",
        "Precisi√≥n (Repetibilidad e Intermedia)",
        "Robustez",
        "Estabilidad"
    ]
)

# Funciones generales

def previsualizar_datos(datos):
    """Previsualiza los datos cargados en la interfaz."""
    st.write("### Vista previa de los datos cargados:")
    st.write(datos.head())
    st.write(f"**N√∫mero de filas:** {datos.shape[0]}, **N√∫mero de columnas:** {datos.shape[1]}")

def validar_columnas(datos, columnas_necesarias):
    """Valida que las columnas requeridas est√©n presentes en el archivo subido."""
    columnas_faltantes = [col for col in columnas_necesarias if col not in datos.columns]
    if columnas_faltantes:
        st.error(f"El archivo no contiene las siguientes columnas necesarias: {', '.join(columnas_faltantes)}")
        return False
    return True

def procesar_archivo(archivo, funcion_procesamiento, modulo):
    if archivo:
        try:
            # Inicializar generador de PDF
            pdf_gen = PDFGenerator(modulo)
            
            # Cargar datos
            if archivo.name.endswith('.csv'):
                data = pd.read_csv(archivo)
            else:
                data = pd.read_excel(archivo)
            
            # Verificar que funcion_procesamiento es callable o iterable de callables
            if isinstance(funcion_procesamiento, (list, tuple)):
                resultados = []
                for func in funcion_procesamiento:
                    if callable(func):
                        resultado = func(data, pdf_gen)
                        resultados.append(resultado)
                    else:
                        st.error("Error: Uno de los elementos de la lista/tuple de funciones no es callable.")
                        return False
                overall_result = all(resultados)
            else:
                if callable(funcion_procesamiento):
                    overall_result = funcion_procesamiento(data, pdf_gen)
                else:
                    st.error("Error: La funci√≥n de procesamiento no es callable.")
                    return False
            
            # Generar PDF si el procesamiento es exitoso
            if overall_result:
                pdf = pdf_gen.generate_pdf()
                st.session_state['current_pdf'] = pdf
                st.session_state['current_module'] = modulo
                return True
            
        except Exception as e:
            st.error(f"Error: {str(e)}")
            return False
    return None


def calcular_linealidad(data, pdf_gen):
    """Calcula la linealidad y rango del m√©todo agrupando por Analista y D√≠a."""
    sns.set_theme(style="whitegrid", palette="muted")
    COLORS = ['#2ecc71', '#e74c3c']
    
    # 1. Validaci√≥n de columnas y datos
    req_cols = ['Concentraci√≥n', 'Respuesta', 'Tipo', 'D√≠a', 'Analista']
    if not validar_columnas(data, req_cols):
        return False

    data = data.copy()
    for col in ['Concentraci√≥n', 'Respuesta']:
        data[col] = pd.to_numeric(data[col], errors='coerce')
    data.dropna(subset=req_cols, inplace=True)

    # 2. Verificaci√≥n de niveles de concentraci√≥n
    niveles = data[data['Tipo'] == 'Est√°ndar']['Concentraci√≥n'].nunique()
    if niveles < 5:
        st.error("‚úò Requiere 5 niveles de concentraci√≥n (gu√≠a ICH Q2(R1))")
        return False

    cumplimiento_global = True
    metricas_modulo = []

    # 3. An√°lisis por Analista y D√≠a
    for (analista, dia), grupo in data.groupby(['Analista', 'D√≠a']):
        with st.container():
            st.markdown(f"## üî¨ Analista: {analista} | üìÖ D√≠a: {dia}")
            pdf_gen.add_subsection(f"Analista: {analista} - D√≠a: {dia}")

            # 4. Procesamiento de est√°ndares
            estandar = grupo[grupo['Tipo'] == 'Est√°ndar']
            if estandar.empty:
                st.warning(f"‚ö†Ô∏è Sin est√°ndares para {analista} - D√≠a {dia}")
                continue

            # 5. Validaci√≥n de triplicados
            conteo = estandar.groupby('Concentraci√≥n').size()
            if any(conteo < 3):
                st.error(f"‚úò Triplicados incompletos en {analista}-{dia} (USP <1225>)")
                continue

            # 6. C√°lculos estad√≠sticos
            try:
                estandar_prom = estandar.groupby('Concentraci√≥n').agg(
                    Respuesta=('Respuesta', 'mean'),
                    DE=('Respuesta', 'std')
                ).reset_index()

                X = estandar_prom['Concentraci√≥n']
                y = estandar_prom['Respuesta']
                reg = linregress(X, y)
                
                # Intervalo de confianza pendiente
                n = len(X)
                t_val = t.ppf(0.975, n-2)
                ci_slope = (reg.slope - t_val*reg.stderr, reg.slope + t_val*reg.stderr)
                slope_cumple = not (ci_slope[0] <= 0 <= ci_slope[1])
                
                # Residuales porcentuales
                pred_y = reg.slope*X + reg.intercept
                residual_pct = ((y - pred_y)/pred_y)*100
                residual_cumple = all(abs(residual_pct) <= 2)

            except Exception as e:
                st.error(f"Error en an√°lisis: {str(e)}")
                continue

            # 7. Criterios de aceptaci√≥n
            adj_r2 = 1 - (1 - reg.rvalue**2)*(n-1)/(n-2)
            cumple = all([adj_r2 >= 0.98, slope_cumple, residual_cumple])

            # 8. Registro de m√©tricas
            metricas = {
                'Analista': analista,
                'D√≠a': dia,
                'R¬≤': adj_r2,
                'Pendiente': reg.slope,
                'IC Pendiente': f"[{ci_slope[0]:.4f}, {ci_slope[1]:.4f}]",
                'Residual Max (%)': f"{abs(residual_pct).max():.2f}",
                'Cumplimiento': cumple
            }
            metricas_modulo.append(metricas)

            # 9. Visualizaci√≥n y tablas
            fig = plt.figure(figsize=(14, 6), dpi=150)
            gs = fig.add_gridspec(2, 2)
            
            # Gr√°fico de regresi√≥n
            ax1 = fig.add_subplot(gs[0, 0])
            sns.regplot(x=X, y=y, ax=ax1, ci=95, 
                        scatter_kws={'s':80, 'edgecolor':'black'},
                        line_kws={'color':COLORS[0], 'lw':2})
            ax1.set_title(f"Regresi√≥n Lineal - {analista} (D√≠a {dia})")
            
            # Residuales
            ax2 = fig.add_subplot(gs[0, 1])
            sns.scatterplot(x=X, y=residual_pct, ax=ax2, color=COLORS[1])
            ax2.axhline(0, color='black', ls='--')
            ax2.fill_between(X, -2, 2, color='gray', alpha=0.1)
            ax2.set_title("Residuales (%)")
            
            # Tabla para Streamlit
            ax3 = fig.add_subplot(gs[1, :])
            ax3.axis('off')
            tabla_streamlit = [
                ["Par√°metro", "Valor", "Cumple"],
                [f"R¬≤ Ajustado", f"{adj_r2:.4f}", "‚úî" if adj_r2 >=0.98 else "‚úò"],
                [f"IC Pendiente", f"{ci_slope[0]:.4f}-{ci_slope[1]:.4f}", "‚úî" if slope_cumple else "‚úò"],
                [f"Residual M√°x.", f"{abs(residual_pct).max():.2f}%", "‚úî" if residual_cumple else "‚úò"]
            ]
            tabla = ax3.table(
                cellText=tabla_streamlit, 
                loc='center', 
                colWidths=[0.3,0.4,0.3],
                cellLoc='center'
            )
            tabla.auto_set_font_size(False)
            tabla.set_fontsize(12)
            
            # Estilizar celdas
            for row in [1,2,3]:
                celda = tabla.get_celld()[(row,2)]
                celda.set_text_props(
                    color='green' if "‚úî" in celda.get_text().get_text() else 'red',
                    weight='bold'
                )

            plt.tight_layout()
            st.pyplot(fig)
            
            # Tabla para PDF
            pdf_gen.add_table(
                table_data=[
                    ["Par√°metro", "Valor", "Cumplimiento"],
                    ["R¬≤ Ajustado", f"{adj_r2:.4f}", "Cumple" if adj_r2 >=0.98 else "No cumple"],
                    ["IC Pendiente", f"{ci_slope[0]:.4f} a {ci_slope[1]:.4f}", "Cumple" if slope_cumple else "No cumple"],
                    ["Residual M√°ximo", f"{abs(residual_pct).max():.2f}%", "Cumple" if residual_cumple else "No cumple"]
                ],
                title=f"Resultados {analista} - D√≠a {dia}"
            )
            
            pdf_gen.capture_figure(fig, f"Linealidad_{analista}_{dia}")

    # 10. Resumen consolidado
    if metricas_modulo:
        df_metricas = pd.DataFrame(metricas_modulo)
        
        # Tabla resumen PDF
        tabla_resumen = [
            ["Analista", "D√≠a", "R¬≤", "IC Pendiente", "Cumplimiento"]
        ] + [
            [
                row['Analista'],
                str(row['D√≠a']),
                f"{row['R¬≤']:.4f}",
                row['IC Pendiente'],
                "Cumple" if row['Cumplimiento'] else "No cumple"
            ] for _, row in df_metricas.iterrows()
        ]
        
        pdf_gen.add_table(
            table_data=tabla_resumen,
            title="Resumen General de Linealidad"
        )

        # Conclusi√≥n final
        cumplimiento_global = all(df_metricas['Cumplimiento'])
        st.metric("Cumplimiento Global", 
                 "‚úÖ Cumple" if cumplimiento_global else "‚ùå No Cumple",
                 delta=f"{df_metricas['Cumplimiento'].sum()}/{len(df_metricas)} grupos v√°lidos")
        pdf_gen.add_metric("Cumplimiento Global", 
                          "Cumple" if cumplimiento_global else "No Cumple", 
                          cumplimiento_global)

    return True

def calcular_lod_loq(datos, pdf_gen):
    """Calcula LOD y LOQ con visualizaci√≥n y reporte PDF integrados seg√∫n las gu√≠as de Farmac√©uticos y CCAYAC."""
    COLORS = ['#3498db', '#2ecc71', '#e74c3c']  # Azul, Verde, Rojo
    sns.set_theme(style="whitegrid", font_scale=0.95)
    
    # Secci√≥n inicial en el PDF
    pdf_gen.add_section_title("Resultados de LOD y LOQ")
    pdf_gen.add_text_block("Este reporte presenta el c√°lculo de LOD (L√≠mite de Detecci√≥n) y LOQ (L√≠mite de Cuantificaci√≥n) "
                           "seg√∫n la metodolog√≠a validada por las gu√≠as de Farmac√©uticos y CCAYAC.")
    
    # Validaci√≥n de columnas y tipos num√©ricos
    columnas_necesarias = ['D√≠a', 'Tipo', 'Concentraci√≥n', 'Respuesta']
    if not validar_columnas(datos, columnas_necesarias):
        pdf_gen.add_text_block("‚úò Error: Faltan columnas necesarias en el dataset.", style='error')
        return False

    if not np.issubdtype(datos['Concentraci√≥n'].dtype, np.number) or \
       not np.issubdtype(datos['Respuesta'].dtype, np.number):
        pdf_gen.add_text_block("‚úò Error: Las columnas 'Concentraci√≥n' y 'Respuesta' deben ser num√©ricas.", style='error')
        st.error("‚úò Las columnas 'Concentraci√≥n' y 'Respuesta' deben ser num√©ricas")
        return False

    datos_estandar = datos[datos['Tipo'] == 'Est√°ndar']
    if datos_estandar.empty:
        pdf_gen.add_text_block("‚úò Error: No se encontraron datos de tipo 'Est√°ndar'.", style='error')
        st.error("‚úò No se encontraron datos de tipo 'Est√°ndar'")
        return False

    # Mostrar la metodolog√≠a en Streamlit y agregar versi√≥n "limpia" para el PDF
    with st.expander("üìä M√©todo de C√°lculo", expanded=True):
        contenido_markdown = """
        **F√≥rmulas aplicadas:**
        - $LOD = \\frac{3 \\times œÉ}{S}$  
        - $LOQ = \\frac{10 \\times œÉ}{S}$  
        Donde:
        - $œÉ$: Desviaci√≥n est√°ndar de los residuales (o blancos)  
        - $S$: Pendiente de la curva de calibraci√≥n
        """
        st.markdown(contenido_markdown)
        contenido_pdf = (
            "F√≥rmulas aplicadas:\n"
            "- LOD = (3 √ó œÉ) / S\n"
            "- LOQ = (10 √ó œÉ) / S\n"
            "Donde:\n"
            "- œÉ: Desviaci√≥n est√°ndar de los residuales (o blancos)\n"
            "- S: Pendiente de la curva de calibraci√≥n"
        )
        pdf_gen.add_subsection("Metodolog√≠a de C√°lculo")
        pdf_gen.add_text_block(contenido_pdf)
    
    # Procesar cada d√≠a
    for dia in datos_estandar['D√≠a'].unique():
        with st.container():
            st.markdown(f"## üìÖ D√≠a {dia}")
        
            datos_dia = datos_estandar[datos_estandar['D√≠a'] == dia]
            if len(datos_dia) < 3:
                st.warning(f"‚ö†Ô∏è M√≠nimo 3 puntos requeridos para un c√°lculo confiable (D√≠a {dia})")
                pdf_gen.add_text_block(f"‚ö†Ô∏è M√≠nimo 3 puntos requeridos para un c√°lculo confiable (D√≠a {dia})", style='error')
                continue
            try:
                # C√°lculos de regresi√≥n y par√°metros
                regresion = linregress(datos_dia['Concentraci√≥n'], datos_dia['Respuesta'])
                slope = regresion.slope
                intercept = regresion.intercept
                r_value = regresion.rvalue
                r_squared = r_value**2
                residuals = datos_dia['Respuesta'] - (slope * datos_dia['Concentraci√≥n'] + intercept)
                std_dev = residuals.std()
                # Uso de factores 3 y 10 seg√∫n las gu√≠as
                lod = (3 * std_dev) / slope if slope != 0 else np.nan
                loq = (10 * std_dev) / slope if slope != 0 else np.nan
                
                # Nota: Los criterios de aceptaci√≥n requieren evaluar que:
                # - LOD < especificaci√≥n de impurezas
                # - LOQ ‚â§ 50% del l√≠mite de especificaci√≥n
                # Dado que estas especificaciones dependen de la matriz, se deben comparar externamente.
                
                # Mostrar m√©tricas en Streamlit (se usan tres columnas)
                col1, col2 = st.columns(2)
                with col1:
                    st.metric("Pendiente (S)", f"{slope:.4f}")
                    st.metric("R¬≤", f"{r_squared:.4f}")
                with col2:
                    st.metric("LOD (Œºg/mL)", f"{lod:.4f}", help="(3√óœÉ)/S")
                    st.metric("LOQ (Œºg/mL)", f"{loq:.4f}", help="(10√óœÉ)/S")
                
                # Agregar m√©tricas al PDF (tabla)
                metricas_dia = {
                    'Pendiente (S)': f"{slope:.4f}",
                    'R¬≤': f"{r_squared:.4f}",
                    'LOD (Œºg/mL)': f"{lod:.4f}",
                    'LOQ (Œºg/mL)': f"{loq:.4f}"
                }
                pdf_gen.add_metrics_table(f"M√©tricas D√≠a {dia}", metricas_dia)
                
                # Crear gr√°fica: mostrar l√≠nea de regresi√≥n y l√≠neas verticales en LOD y LOQ (si est√°n en rango)
                fig, ax = plt.subplots(figsize=(10, 5))
                ax.scatter(datos_dia['Concentraci√≥n'], datos_dia['Respuesta'], color='lightgray', label='Datos est√°ndar')
                x_vals = np.linspace(datos_dia['Concentraci√≥n'].min(), datos_dia['Concentraci√≥n'].max(), 100)
                y_vals = slope * x_vals + intercept
                ax.plot(x_vals, y_vals, color=COLORS[0], label='L√≠nea de regresi√≥n')
                if datos_dia['Concentraci√≥n'].min() <= lod <= datos_dia['Concentraci√≥n'].max():
                    ax.axvline(lod, color=COLORS[2], linestyle='--', label=f'LOD = {lod:.2f}')
                if datos_dia['Concentraci√≥n'].min() <= loq <= datos_dia['Concentraci√≥n'].max():
                    ax.axvline(loq, color=COLORS[1], linestyle='-.', label=f'LOQ = {loq:.2f}')
                ax.set_title(f"Calibraci√≥n y L√≠mites - D√≠a {dia} (R¬≤ = {r_squared:.4f})", fontsize=14)
                ax.set_xlabel("Concentraci√≥n (Œºg/mL)", fontsize=12)
                ax.set_ylabel("Respuesta (UA)", fontsize=12)
                ax.legend()
                ax.grid(True, linestyle='--', alpha=0.5)
                st.pyplot(fig)
                pdf_gen.capture_figure(fig, f"Limites_Dia_{dia}")
                plt.close(fig)
                
            except Exception as e:
                st.error(f"‚úò Error en D√≠a {dia}: {str(e)}")
                pdf_gen.add_text_block(f"‚úò Error en D√≠a {dia}: {str(e)}", style='error')
                continue
    
    return True

def graficar_curva_calibracion_streamlit(datos, pdf_gen):
    """Grafica la curva de calibraci√≥n con estilo profesional e integra la gr√°fica y la tabla en el reporte PDF, seg√∫n las gu√≠as de Farmac√©uticos y CCAYAC."""
    COLORS = ['#2ecc71', '#3498db', '#e74c3c']  # Verde, Azul, Rojo
    plt.style.use('seaborn-v0_8-talk')
    
    # Validaci√≥n de datos
    columnas_necesarias = ['D√≠a', 'Tipo', 'Concentraci√≥n', 'Respuesta']
    if not validar_columnas(datos, columnas_necesarias):
        pdf_gen.add_text_block("‚úò Error: Faltan columnas necesarias en el dataset para calibraci√≥n.", style='error')
        return False

    datos_estandar = datos[datos['Tipo'] == 'Est√°ndar']
    if datos_estandar.empty:
        pdf_gen.add_text_block("‚úò Error: No se encontraron datos de calibraci√≥n.", style='error')
        st.error("‚úò No se encontraron datos de calibraci√≥n")
        return False

    pdf_gen.add_section_title("Curvas de Calibraci√≥n")
    
    for dia in datos_estandar['D√≠a'].unique():
        with st.container():
            st.markdown(f"## üìà Curva de Calibraci√≥n - D√≠a {dia}")
            datos_dia = datos_estandar[datos_estandar['D√≠a'] == dia]
            if len(datos_dia) < 3:
                st.warning(f"‚ö†Ô∏è M√≠nimo 3 puntos recomendados para curva confiable (D√≠a {dia})")
                pdf_gen.add_text_block(f"‚ö†Ô∏è M√≠nimo 3 puntos recomendados para curva confiable (D√≠a {dia})", style='error')
                continue
            try:
                # C√°lculos de regresi√≥n y par√°metros
                regresion = linregress(datos_dia['Concentraci√≥n'], datos_dia['Respuesta'])
                slope = regresion.slope
                intercept = regresion.intercept
                r_value = regresion.rvalue
                r_squared = r_value**2
                residuals = datos_dia['Respuesta'] - (slope * datos_dia['Concentraci√≥n'] + intercept)
                std_dev = residuals.std()
                # Uso de los factores 3 y 10 seg√∫n la metodolog√≠a
                lod = (3 * std_dev) / slope if slope != 0 else np.nan
                loq = (10 * std_dev) / slope if slope != 0 else np.nan

                # Crear gr√°fica profesional de calibraci√≥n
                fig, ax = plt.subplots(figsize=(10, 6), facecolor='#f8f9fa')
                sns.regplot(x=datos_dia['Concentraci√≥n'], y=datos_dia['Respuesta'],
                           ax=ax, ci=95,
                           scatter_kws={'s': 80, 'color': COLORS[0], 'edgecolor': 'black', 'alpha': 0.8},
                           line_kws={'color': COLORS[1], 'lw': 2, 'alpha': 0.8})
                ax.axvline(lod, color=COLORS[2], linestyle='--', lw=2, alpha=0.8, label=f'LOD ({lod:.2f})')
                ax.axvline(loq, color=COLORS[1], linestyle='-.', lw=2, alpha=0.8, label=f'LOQ ({loq:.2f})')
                textstr = '\n'.join((
                    f'$R^2 = {r_squared:.4f}$',
                    f'$y = {slope:.4f}x + {intercept:.4f}$',
                    f'$œÉ = {std_dev:.4f}$'
                ))
                ax.text(0.05, 0.95, textstr, transform=ax.transAxes,
                        fontsize=12, verticalalignment='top',
                        bbox=dict(boxstyle='round', facecolor='white', alpha=0.8))
                ax.set_title(f"Curva de Calibraci√≥n - D√≠a {dia}", fontsize=16, pad=20)
                ax.set_xlabel("Concentraci√≥n (Œºg/mL)", fontsize=14)
                ax.set_ylabel("Respuesta (UA)", fontsize=14)
                ax.grid(True, linestyle='--', alpha=0.5)
                ax.legend(loc='lower right', frameon=True, shadow=True)
                # Opcional: resaltar la zona comprendida entre 0 y LOQ
                ax.axvspan(0, loq, facecolor='#f8d7da', alpha=0.3, label='Zona LOD/LOQ')
                st.pyplot(fig)
                pdf_gen.capture_figure(fig, f"Calibracion_Dia_{dia}")
                plt.close(fig)

                # Mostrar tabla de datos en Streamlit
                with st.expander(f"üìã Datos de Calibraci√≥n - D√≠a {dia}"):
                    st.dataframe(
                        datos_dia[['Concentraci√≥n', 'Respuesta']]
                        .style.format("{:.4f}")
                    )
                    
            except Exception as e:
                st.error(f"‚úò Error en D√≠a {dia}: {str(e)}")
                pdf_gen.add_text_block(f"‚úò Error en D√≠a {dia}: {str(e)}", style='error')
                continue

    return True

def agrupar_valores(valores, umbral=1.0):
    """
    Agrupa una lista ordenada de valores en grupos donde la diferencia entre elementos consecutivos es <= umbral.
    Devuelve una lista de grupos (cada grupo es una lista de valores).
    """
    grupos = []
    if len(valores) == 0:
        return grupos
    grupo_actual = [valores[0]]
    for v in valores[1:]:
        if v - grupo_actual[-1] <= umbral:
            grupo_actual.append(v)
        else:
            grupos.append(grupo_actual)
            grupo_actual = [v]
    grupos.append(grupo_actual)
    return grupos

def calcular_precision_por_rango(datos, pdf_gen, umbral_agrupacion=1.0):
    """
    Realiza el an√°lisis de precisi√≥n (Precisi√≥n del Sistema e Intermedia) para cada rango de concentraci√≥n,
    agrupando autom√°ticamente los valores de 'Concentraci√≥n' seg√∫n una tolerancia de ¬±umbral_agrupacion.
    
    Para la Precisi√≥n del Sistema (8.1), se calcula el CV para cada grupo (Analista, D√≠a) en ese rango y se
    selecciona el grupo con el menor CV para reportarlo.
    
    Para la Precisi√≥n Intermedia (8.7), se calcula el CV por cada combinaci√≥n (Analista, D√≠a) y se resumen los
    valores (por ejemplo, se reporta el CV m√≠nimo y el promedio de CV de los grupos).
    
    Se espera que 'datos' tenga las columnas:
       ['Concentraci√≥n', 'Respuesta', 'D√≠a', 'Analista', 'Tipo']
    
    Los resultados se muestran en Streamlit y se agregan al PDF mediante 'pdf_gen'.
    """
    st.header("üéØ An√°lisis de Precisi√≥n por Rango (Agrupamiento Autom√°tico)")
    pdf_gen.add_section_title("An√°lisis de Precisi√≥n por Rango (Agrupamiento Autom√°tico)")

    # 1. Validar columnas requeridas
    required_cols = ['Concentraci√≥n', 'Respuesta', 'D√≠a', 'Analista', 'Tipo']
    for col in required_cols:
        if col not in datos.columns:
            st.error(f"Falta la columna '{col}' en el DataFrame.")
            pdf_gen.add_text_block(f"‚úò Error: Falta la columna '{col}' en el DataFrame.", style="error")
            return False

    # 2. Conversi√≥n num√©rica y limpieza
    for col in ['Concentraci√≥n', 'Respuesta']:
        datos[col] = pd.to_numeric(datos[col], errors='coerce')
    datos.dropna(subset=['Concentraci√≥n', 'Respuesta'], inplace=True)
    datos['Tipo'] = datos['Tipo'].str.lower()

    # 3. Agrupar autom√°ticamente los valores de concentraci√≥n con tolerancia ¬±umbral_agrupacion
    unique_vals = sorted(datos['Concentraci√≥n'].unique())
    grupos_conc = agrupar_valores(unique_vals, umbral=umbral_agrupacion)
    mapping = {}
    for grupo in grupos_conc:
        rep = np.median(grupo)
        for v in grupo:
            mapping[v] = rep
    datos['Rango'] = datos['Concentraci√≥n'].map(mapping).apply(lambda x: f"{x:.2f}")

    # Mostrar la agrupaci√≥n para depuraci√≥n
    st.subheader("Agrupaci√≥n de Concentraciones")
    df_grupos = datos[['Concentraci√≥n', 'Rango']].drop_duplicates().sort_values(by='Concentraci√≥n')
    st.dataframe(df_grupos)
    tabla_grupos = [["Concentraci√≥n", "Rango asignado"]]
    for _, row in df_grupos.iterrows():
        tabla_grupos.append([f"{row['Concentraci√≥n']:.2f}", row['Rango']])
    pdf_gen.add_table(tabla_grupos, title="Agrupaci√≥n de Concentraciones (Autom√°tica)")

    # 4. Iterar sobre cada rango disponible
    rangos_disponibles = sorted(datos['Rango'].unique(), key=lambda x: float(x))
    for rango_label in rangos_disponibles:
        df_rango = datos[datos['Rango'] == rango_label].copy()
        if df_rango.empty:
            continue

        st.markdown(f"### An√°lisis para el Rango {rango_label}")
        pdf_gen.add_subsection(f"Rango {rango_label}")

        # Filtrar est√°ndares
        estandares = df_rango[df_rango['Tipo'] == 'est√°ndar'].copy()
        if estandares.empty:
            st.warning(f"No se encontraron datos de tipo 'est√°ndar' en el rango {rango_label}.")
            pdf_gen.add_text_block(f"‚ö†Ô∏è No se encontraron datos de tipo 'est√°ndar' en el rango {rango_label}.", style="warning")
            continue

        # ------------------------------------------------
        # A: Precisi√≥n del Sistema (8.1)
        # ------------------------------------------------
        with st.expander(f"üìä Precisi√≥n del Sistema - Rango {rango_label}", expanded=False):
            pdf_gen.add_subsection(f"Precisi√≥n del Sistema (8.1) - Rango {rango_label}")
            grupos = estandares.groupby(['Analista', 'D√≠a'])
            resultados = []
            for (analista, dia), grupo in grupos:
                if len(grupo) < 6:
                    st.warning(f"Analista {analista} (D√≠a {dia}): Insuficientes r√©plicas ({len(grupo)}/6)")
                    continue
                cv = (grupo['Respuesta'].std() / grupo['Respuesta'].mean()) * 100
                resultados.append({
                    'Analista': analista,
                    'D√≠a': dia,
                    'R√©plicas': len(grupo),
                    'CV (%)': cv,
                    'Media': grupo['Respuesta'].mean(),
                    'Std': grupo['Respuesta'].std()
                })
            if not resultados:
                st.error(f"Rango {rango_label}: No hay grupos v√°lidos (Analista-D√≠a) con ‚â•6 r√©plicas para la precisi√≥n del sistema.")
                pdf_gen.add_text_block(f"‚úò Rango {rango_label}: Insuficientes grupos (Analista-D√≠a) para calcular precisi√≥n del sistema.", style="error")
            else:
                df_resultados = pd.DataFrame(resultados)
                mejor_grupo = df_resultados.loc[df_resultados['CV (%)'].idxmin()]
                st.markdown(f"**Mejor grupo:** Analista {mejor_grupo['Analista']} - D√≠a {mejor_grupo['D√≠a']} con CV = {mejor_grupo['CV (%)']:.2f}%")
                pdf_gen.add_text_block(f"Mejor grupo (Precisi√≥n del Sistema) en el rango {rango_label}: "
                                       f"Analista {mejor_grupo['Analista']} - D√≠a {mejor_grupo['D√≠a']} con CV = {mejor_grupo['CV (%)']:.2f}%.")
                st.dataframe(df_resultados.style.format({"CV (%)": "{:.2f}"}), use_container_width=True)

                metodo_sistema = st.selectbox(f"Tipo de M√©todo para Precisi√≥n del Sistema (rango {rango_label}):",
                                              ["fisico_quimico", "biologico"], key=f"sistema_{rango_label}")
                umbral_sistema = 1.5 if metodo_sistema == "fisico_quimico" else 3.0

                st.metric("Media Respuesta (Mejor grupo)", f"{mejor_grupo['Media']:.4f}")
                st.metric("Desv. Est√°ndar (Mejor grupo)", f"{mejor_grupo['Std']:.4f}")
                st.metric("CV (Mejor grupo)", f"{mejor_grupo['CV (%)']:.2f}%", 
                          delta="Cumple" if mejor_grupo['CV (%)'] <= umbral_sistema else "No Cumple")

                grupo_mejor = grupos.get_group((mejor_grupo['Analista'], mejor_grupo['D√≠a']))
                fig_sistema = plt.figure(figsize=(6, 4))
                sns.scatterplot(data=grupo_mejor, x='Concentraci√≥n', y='Respuesta', hue='D√≠a', style='Analista')
                plt.title(f"Precisi√≥n del Sistema - Mejor grupo (Rango {rango_label})")
                plt.axhline(mejor_grupo['Media'], color='red', linestyle='--', label='Media')
                plt.legend()
                st.pyplot(fig_sistema)
                pdf_gen.capture_figure(fig_sistema, f"dispersion_sistema_{rango_label}_mejor")
                plt.close(fig_sistema)

                tabla_sistema = [
                    ["Par√°metro", "Valor"],
                    ["Analista", mejor_grupo['Analista']],
                    ["D√≠a", mejor_grupo['D√≠a']],
                    ["R√©plicas", f"{mejor_grupo['R√©plicas']}"],
                    ["Media Respuesta", f"{mejor_grupo['Media']:.4f}"],
                    ["Desv. Est√°ndar", f"{mejor_grupo['Std']:.4f}"],
                    ["CV Sistema", f"{mejor_grupo['CV (%)']:.2f}%"],
                    ["Umbral", f"{umbral_sistema}%"],
                    ["Cumplimiento", "Cumple" if mejor_grupo['CV (%)'] <= umbral_sistema else "No Cumple"]
                ]
                pdf_gen.add_table(tabla_sistema, title=f"Precisi√≥n del Sistema - Rango {rango_label}")

        # ------------------------------------------------
        # B: Precisi√≥n Intermedia (8.7)
        # ------------------------------------------------
        with st.expander(f"üìà Precisi√≥n Intermedia - Rango {rango_label}", expanded=False):
            pdf_gen.add_subsection(f"Precisi√≥n Intermedia (8.7) - Rango {rango_label}")
            if estandares['D√≠a'].nunique() < 2 or estandares['Analista'].nunique() < 2:
                st.error(f"Rango {rango_label}: Se requieren datos de al menos 2 d√≠as y 2 analistas para la precisi√≥n intermedia.")
                pdf_gen.add_text_block(f"‚úò Rango {rango_label}: Insuficientes d√≠as o analistas para precisi√≥n intermedia.", style="error")
            else:
                cv_inter_df = (estandares.groupby(['D√≠a', 'Analista'])['Respuesta']
                               .apply(lambda x: (x.std() / x.mean()) * 100)
                               .reset_index(name='CV'))
                cv_min = cv_inter_df['CV'].min()
                cv_mean = cv_inter_df['CV'].mean()
                
                st.markdown("#### CV por D√≠a y Analista")
                st.dataframe(cv_inter_df)
                fig_inter = plt.figure(figsize=(6, 4))
                sns.barplot(data=cv_inter_df, x='D√≠a', y='CV', hue='Analista')
                plt.axhline(cv_min, color='gray', linestyle=':', label=f"CV M√≠nimo = {cv_min:.2f}%")
                plt.axhline(cv_mean, color='blue', linestyle=':', label=f"CV Promedio = {cv_mean:.2f}%")
                plt.title(f"Precisi√≥n Intermedia - Rango {rango_label}")
                plt.legend()
                st.pyplot(fig_inter)
                pdf_gen.capture_figure(fig_inter, f"cv_inter_{rango_label}")
                plt.close(fig_inter)

                # En lugar de un CV global calculado sobre todos los datos,
                # se reportan los valores resumen (m√≠nimo y promedio) de CV por grupo.
                metodo_inter = st.selectbox(f"Tipo de M√©todo para Precisi√≥n Intermedia (rango {rango_label}):",
                                            ["cromatografico", "quimico", "espectrofotometrico", "biologico"],
                                            key=f"inter_{rango_label}")
                if metodo_inter == "cromatografico":
                    umbral_inter = 2.0
                elif metodo_inter in ["quimico", "espectrofotometrico"]:
                    umbral_inter = 3.0
                elif metodo_inter == "biologico":
                    umbral_inter = 5.0
                else:
                    umbral_inter = 2.0

                st.metric("CV M√≠nimo (D√≠a-Analista)", f"{cv_min:.2f}%", 
                          delta="Cumple" if cv_min <= umbral_inter else "No Cumple")
                st.metric("CV Promedio (Rango)", f"{cv_mean:.2f}%", 
                          delta="Cumple" if cv_mean <= umbral_inter else "No Cumple")

                tabla_inter = [
                    ["Par√°metro", "Valor"],
                    ["CV M√≠nimo", f"{cv_min:.2f}%"],
                    ["CV Promedio", f"{cv_mean:.2f}%"],
                    ["Umbral Intermedio", f"{umbral_inter}%"]
                ]
                pdf_gen.add_table(tabla_inter, title=f"Precisi√≥n Intermedia - Rango {rango_label}")

    st.success("‚úî An√°lisis de Precisi√≥n por Rango finalizado para todos los rangos.")
    pdf_gen.add_text_block("‚úî An√°lisis de Precisi√≥n por Rango finalizado para todos los rangos.")
    return True

#####################################
# Clase PDFGenerator
#####################################
class PDFGenerator:
    def __init__(self, modulo):
        self.modulo = modulo
        self.buffers = []           # Para im√°genes (figuras)
        self.metrics = []           # Para m√©tricas individuales (opcional)
        self.metrics_tables = []    # Para almacenar tablas de m√©tricas (diccionarios)
        self.custom_tables = []     # Para tablas personalizadas (listas de listas)
        self.text_blocks = []       # Para bloques de texto
        self.sections = []          # Para t√≠tulos de secci√≥n
        self.styles = getSampleStyleSheet()
        if 'error' not in self.styles.byName:
            self.styles.add(ParagraphStyle(name='error', parent=self.styles['Normal'], textColor=colors.red))
        if 'conclusion' not in self.styles.byName:
            self.styles.add(ParagraphStyle(name='conclusion', parent=self.styles['Normal'], textColor=colors.green))

    def add_table(self, table_data, title=None, headers=None):
        """Versi√≥n corregida que maneja headers personalizados"""
        if headers:
            # Insertar headers como primera fila
            table_data = [headers] + table_data
        self.custom_tables.append((title, table_data))

    def capture_figure(self, fig, fig_name=None):
        buf = BytesIO()
        fig.savefig(buf, format='png', bbox_inches='tight', dpi=150)
        buf.seek(0)
        self.buffers.append(buf)
        plt.close(fig)

    def add_metric(self, label, value, cumplimiento):
        self.metrics.append({
            'label': label,
            'value': value,
            'cumplimiento': cumplimiento
        })

    def add_metrics_table(self, title, metrics):
        self.metrics_tables.append((title, metrics))

    def add_subsection(self, title):
        subsection_style = ParagraphStyle(
            name='SubsectionStyle',
            parent=self.styles['Heading3'],
            fontSize=11,
            textColor=colors.darkblue,
            spaceAfter=8,
            alignment=0
        )
        self.text_blocks.append((title, subsection_style))

    def add_section_title(self, title):
        self.sections.append(title)

    def add_text_block(self, text, style=None):
        if isinstance(style, str):
            style = self.styles.get(style, self.styles['Normal'])
        elif style is None or not hasattr(style, "name"):
            style = self.styles['Normal']
        self.text_blocks.append((text, style))

    def generate_pdf(self):
        pdf_buffer = BytesIO()
        doc = SimpleDocTemplate(pdf_buffer, pagesize=letter)
        elements = []
        
        title_style = ParagraphStyle(
            name='TitleStyle',
            parent=self.styles['Title'],
            fontSize=14,
            textColor=colors.darkblue,
            spaceAfter=20,
            alignment=1
        )
        section_style = ParagraphStyle(
            name='SectionStyle',
            parent=self.styles['Heading2'],
            fontSize=12,
            textColor=colors.darkblue,
            spaceAfter=10,
            alignment=0
        )
        
        # Portada
        mexico_tz = pytz.timezone("America/Mexico_City")
        elements.append(Paragraph(f"Reporte de Validaci√≥n: {self.modulo}", title_style))
        elements.append(Paragraph(f"Fecha: {datetime.now(mexico_tz).strftime('%d/%m/%Y %H:%M')}", self.styles['Normal']))
        elements.append(Spacer(1, 30))
        
        for sec in self.sections:
            elements.append(Paragraph(sec, section_style))
            elements.append(Spacer(1, 15))
        
        for text, style in self.text_blocks:
            elements.append(Paragraph(text, style))
            elements.append(Spacer(1, 12))
        
        for buf in self.buffers:
            img = RLImage(buf, width=6*inch, height=4*inch)
            elements.append(img)
            elements.append(Spacer(1, 15))
        
        if self.metrics_tables:
            for title, met_dict in self.metrics_tables:
                elements.append(Paragraph(title, self.styles['Heading2']))
                elements.append(Spacer(1, 12))
                table_data = [["M√©trica", "Valor"]]
                for key, value in met_dict.items():
                    table_data.append([key, value])
                tabla = Table(table_data, colWidths=[3*inch, 3*inch])
                tabla.setStyle(TableStyle([
                    ('BACKGROUND', (0,0), (-1,0), colors.HexColor("#003366")),
                    ('TEXTCOLOR', (0,0), (-1,0), colors.whitesmoke),
                    ('ALIGN', (0,0), (-1,-1), 'CENTER'),
                    ('FONTSIZE', (0,0), (-1,-1), 10),
                    ('GRID', (0,0), (-1,-1), 1, colors.black)
                ]))
                elements.append(tabla)
                elements.append(Spacer(1, 20))
        
        if self.custom_tables:
            for title, table_data in self.custom_tables:
                if title:
                    elements.append(Paragraph(title, self.styles['Heading2']))
                    elements.append(Spacer(1, 12))
                num_cols = len(table_data[0])
                col_width = 6*inch / num_cols
                tabla = Table(table_data, colWidths=[col_width]*num_cols)
                tabla.setStyle(TableStyle([
                    ('BACKGROUND', (0,0), (-1,0), colors.HexColor("#003366")),
                    ('TEXTCOLOR', (0,0), (-1,0), colors.whitesmoke),
                    ('ALIGN', (0,0), (-1,-1), 'CENTER'),
                    ('FONTSIZE', (0,0), (-1,-1), 10),
                    ('GRID', (0,0), (-1,-1), 1, colors.black)
                ]))
                elements.append(tabla)
                elements.append(Spacer(1, 20))
        
        if self.metrics:
            elements.append(Paragraph("M√©tricas Clave", self.styles['Heading2']))
            metric_data = [["Par√°metro", "Valor", "Cumplimiento"]]
            for metric in self.metrics:
                metric_data.append([
                    metric['label'],
                    metric['value'],
                    "‚úî" if metric['cumplimiento'] else "‚úò"
                ])
            metric_table = Table(metric_data, colWidths=[3*inch, 2*inch, 1.5*inch])
            metric_table.setStyle(TableStyle([
                ('BACKGROUND', (0,0), (-1,0), colors.HexColor("#003366")),
                ('TEXTCOLOR', (0,0), (-1,0), colors.whitesmoke),
                ('ALIGN', (0,0), (-1,-1), 'CENTER'),
                ('FONTSIZE', (0,0), (-1,-1), 10),
                ('GRID', (0,0), (-1,-1), 1, colors.black)
            ]))
            elements.append(metric_table)
            elements.append(Spacer(1, 20))
        
        doc.build(elements)
        pdf_buffer.seek(0)
        return pdf_buffer

#########################
# Funci√≥n procesar_archivo
#########################
def procesar_archivo(archivo, funcion_procesamiento, modulo):
    if archivo:
        try:
            # Inicializar generador de PDF
            pdf_gen = PDFGenerator(modulo)
            
            # Cargar datos
            if archivo.name.endswith('.csv'):
                data = pd.read_csv(archivo)
            else:
                data = pd.read_excel(archivo)
            
            # Verificar que funcion_procesamiento es callable o iterable de callables
            if isinstance(funcion_procesamiento, (list, tuple)):
                resultados = []
                for func in funcion_procesamiento:
                    if callable(func):
                        resultado = func(data, pdf_gen)
                        resultados.append(resultado)
                    else:
                        st.error("Error: Uno de los elementos de la lista/tuple de funciones no es callable.")
                        return False
                overall_result = all(resultados)
            else:
                if callable(funcion_procesamiento):
                    overall_result = funcion_procesamiento(data, pdf_gen)
                else:
                    st.error("Error: La funci√≥n de procesamiento no es callable.")
                    return False
            
            # Generar PDF si el procesamiento es exitoso
            if overall_result:
                pdf = pdf_gen.generate_pdf()
                st.session_state['current_pdf'] = pdf
                st.session_state['current_module'] = modulo
                return True
            
        except Exception as e:
            st.error(f"Error: {str(e)}")
            return False
    return None

def calcular_exactitud(datos, pdf_gen):
    """
    Calcula la exactitud mediante recuperaci√≥n seg√∫n las gu√≠as de Farmac√©uticos y CCAYAC y genera un reporte PDF integrado.
    Se incluye:
      - C√°lculo de la recuperaci√≥n (%) redondeada a dos decimales.
      - Estad√≠sticos descriptivos: media, DE, mediana, Q1, Q3, IQR.
      - Intervalo de confianza (IC) al 95% para la media.
      - Prueba t (H0: Œº = 100) con p-valor.
      - Detecci√≥n de outliers (m√©todo IQR).
      - Visualizaciones: boxplot con l√≠mites de aceptaci√≥n, histograma, gr√°fico de tendencia y datos detallados.
    """
    # Validar columnas requeridas
    columnas_necesarias = ['D√≠a', 'Concentraci√≥n Te√≥rica', 'Concentraci√≥n Real']
    if not validar_columnas(datos, columnas_necesarias):
        pdf_gen.add_text_block("‚úò Error: Faltan columnas necesarias en el dataset.", style="error")
        return False

    # Calcular porcentaje de recuperaci√≥n redondeado a dos decimales
    datos['Recuperaci√≥n (%)'] = ((datos['Concentraci√≥n Real'] / datos['Concentraci√≥n Te√≥rica']) * 100).round(2)

    # Detecci√≥n de outliers usando el m√©todo IQR para cada d√≠a
    def detectar_outliers(x):
        Q1 = x.quantile(0.25)
        Q3 = x.quantile(0.75)
        IQR = Q3 - Q1
        lower_bound = Q1 - 1.5 * IQR
        upper_bound = Q3 + 1.5 * IQR
        return ~((x >= lower_bound) & (x <= upper_bound))
    datos['Outlier'] = datos.groupby('D√≠a')['Recuperaci√≥n (%)'].transform(detectar_outliers)
    
    # Secci√≥n inicial del PDF
    pdf_gen.add_section_title("An√°lisis de Exactitud - Gu√≠a Farmac√©uticos y CCAYAC")
    pdf_gen.add_text_block(
        "Este reporte presenta el an√°lisis de exactitud mediante recuperaci√≥n, comparando la concentraci√≥n te√≥rica "
        "versus la concentraci√≥n real. Se eval√∫an los siguientes criterios:\n"
        "- Recuperaci√≥n media entre 98-102%\n"
        "- Desviaci√≥n est√°ndar (DE) ‚â§ 3%\n"
        "- Prueba t (H0: Œº = 100) sin significaci√≥n (p > 0.05)"
    )
    
    # An√°lisis estad√≠stico agrupado por d√≠a
    resumen_list = []
    dias = sorted(datos['D√≠a'].unique())
    for dia in dias:
        grupo = datos[datos['D√≠a'] == dia]
        n = len(grupo)
        media = grupo['Recuperaci√≥n (%)'].mean()
        de = grupo['Recuperaci√≥n (%)'].std()
        mediana = grupo['Recuperaci√≥n (%)'].median()
        Q1 = grupo['Recuperaci√≥n (%)'].quantile(0.25)
        Q3 = grupo['Recuperaci√≥n (%)'].quantile(0.75)
        # Calcular intervalo de confianza al 95% para la media (si n > 1)
        if n > 1:
            t_crit = t.ppf(0.975, df=n-1)
            ci_lower = media - t_crit * (de/np.sqrt(n))
            ci_upper = media + t_crit * (de/np.sqrt(n))
        else:
            ci_lower, ci_upper = np.nan, np.nan
        # Prueba t de una muestra: H0: Œº = 100
        t_stat, p_val = ttest_1samp(grupo['Recuperaci√≥n (%)'], 100)
        # Evaluaci√≥n de criterios de aceptaci√≥n
        cumple_media = 98 <= media <= 102
        cumple_de = de <= 3
        cumplimiento = "‚úî" if (cumple_media and cumple_de) else "‚úò"
        
        resumen_list.append({
            'D√≠a': dia,
            'Muestras': n,
            'Media (%)': media,
            'DE (%)': de,
            'Mediana (%)': mediana,
            'Q1 (%)': Q1,
            'Q3 (%)': Q3,
            'IC Media (%)': f"[{ci_lower:.2f}%, {ci_upper:.2f}%]" if n > 1 else "N/A",
            'p-valor': p_val,
            'Cumplimiento': cumplimiento
        })
    resumen = pd.DataFrame(resumen_list)
    
    # Mostrar resultados en la app Streamlit en pesta√±as
    st.header("An√°lisis de Exactitud - Gu√≠a Farmac√©uticos y CCAYAC")
    tab1, tab2, tab3, tab4 = st.tabs(["Resumen Estad√≠stico", "Distribuci√≥n de Recuperaciones", "Tendencia", "Datos Detallados"])
    
    # --- Pesta√±a 1: Resumen Estad√≠stico ---
    with tab1:
        st.subheader("Estad√≠sticos por D√≠a")
        st.dataframe(
            resumen.style.apply(lambda row: ['background: #e6f4ea' if row['Cumplimiento'] == '‚úî' else 'background: #fce8e6']*len(row), axis=1)
        )
        st.markdown("""
        **Criterios de Aceptaci√≥n:**
        - Recuperaci√≥n media entre 98-102%
        - Desviaci√≥n est√°ndar (DE) ‚â§ 3%
        - Prueba t (H0: Œº = 100) sin significaci√≥n (p > 0.05)
        """)
        
        # Dividir el resumen en dos tablas:
        # Tabla 1: Datos generales
        tabla_general_columns = ['D√≠a', 'Muestras', 'Media (%)', 'DE (%)', 'Cumplimiento']
        tabla_detalle_columns = ['D√≠a', 'Mediana (%)', 'Q1 (%)', 'Q3 (%)', 'IC Media (%)', 'p-valor']
        
        tabla_general = []
        tabla_detalle = []
        
        # Formatear encabezados con ancho fijo (15 caracteres)
        encabezado_general = [f"{col:<15}" for col in tabla_general_columns]
        encabezado_detalle = [f"{col:<15}" for col in tabla_detalle_columns]
        tabla_general.append(encabezado_general)
        tabla_detalle.append(encabezado_detalle)
        
        # Recorrer cada fila del resumen para agregar a las dos tablas
        for _, row in resumen.iterrows():
            fila_general = []
            fila_detalle = []
            for col in tabla_general_columns:
                valor = row[col]
                if isinstance(valor, (int, float)):
                    fila_general.append(f"{valor:<15.2f}")
                else:
                    fila_general.append(f"{str(valor):<15}")
            for col in tabla_detalle_columns:
                valor = row[col]
                # Para los valores num√©ricos en detalle, se formatean a 2 decimales
                if isinstance(valor, (int, float)):
                    fila_detalle.append(f"{valor:<15.2f}")
                else:
                    fila_detalle.append(f"{str(valor):<15}")
            tabla_general.append(fila_general)
            tabla_detalle.append(fila_detalle)
        
        # Agregar ambas tablas al PDF con t√≠tulos distintos
        pdf_gen.add_table(tabla_general, title="Resumen General de Recuperaci√≥n")
        pdf_gen.add_table(tabla_detalle, title="Detalle de Recuperaci√≥n")
        # --- Pesta√±a 2: Distribuci√≥n de Recuperaciones ---
    with tab2:
        st.subheader("Distribuci√≥n de Recuperaciones por D√≠a")
        # Boxplot con l√≠mites de aceptaci√≥n
        fig_box, ax_box = plt.subplots(figsize=(10, 6))
        sns.boxplot(data=datos, x='D√≠a', y='Recuperaci√≥n (%)', palette='viridis', ax=ax_box)
        ax_box.axhline(98, color='red', linestyle='--', label='L√≠mite Inferior (98%)')
        ax_box.axhline(102, color='green', linestyle='--', label='L√≠mite Superior (102%)')
        ax_box.set_title("Boxplot de Recuperaci√≥n (%) por D√≠a")
        ax_box.legend()
        st.pyplot(fig_box)
        pdf_gen.capture_figure(fig_box, "Boxplot_Recuperacion")
        plt.close(fig_box)
        
        # Histograma global
        fig_hist, ax_hist = plt.subplots(figsize=(10, 6))
        sns.histplot(data=datos, x='Recuperaci√≥n (%)', bins=12, kde=True, hue='D√≠a', palette='viridis', ax=ax_hist)
        ax_hist.set_title("Histograma de Recuperaci√≥n Global")
        st.pyplot(fig_hist)
        pdf_gen.capture_figure(fig_hist, "Histograma_Recuperacion")
        plt.close(fig_hist)
    
    # --- Pesta√±a 3: Tendencia de la Recuperaci√≥n ---
    with tab3:
        st.subheader("Evoluci√≥n de la Recuperaci√≥n Media por D√≠a")
        fig_line, ax_line = plt.subplots(figsize=(10, 6))
        dias_sorted = resumen['D√≠a']
        medias = resumen['Media (%)']
        # Extraer y convertir los l√≠mites inferior y superior del intervalo
        ci_lower_vals = resumen['IC Media (%)'].apply(
            lambda x: float(x.split('%')[0][1:].strip()) if x != "N/A" else np.nan
        )
        ci_upper_vals = resumen['IC Media (%)'].apply(
            lambda x: float(x.split('%')[1].replace(',', '').replace(']', '').strip()) if x != "N/A" else np.nan
        )
        err_lower = medias - ci_lower_vals
        err_upper = ci_upper_vals - medias
        err = [err_lower, err_upper]
        ax_line.errorbar(dias_sorted, medias, yerr=err, fmt='-o', capsize=5, color='blue', label='Media Recuperaci√≥n')
        ax_line.axhline(98, color='red', linestyle='--', label='L√≠mite Inferior (98%)')
        ax_line.axhline(102, color='green', linestyle='--', label='L√≠mite Superior (102%)')
        ax_line.set_title("Tendencia de la Recuperaci√≥n Media")
        ax_line.set_xlabel("D√≠a")
        ax_line.set_ylabel("Recuperaci√≥n (%)")
        ax_line.legend()
        st.pyplot(fig_line)
        pdf_gen.capture_figure(fig_line, "Tendencia_Recuperacion")
        plt.close(fig_line)
    
    # --- Pesta√±a 4: Datos Detallados ---
    with tab4:
        st.subheader("Datos Completos")
        st.dataframe(
            datos.style.format({
                'Concentraci√≥n Te√≥rica': '{:.2f}',
                'Concentraci√≥n Real': '{:.2f}',
                'Recuperaci√≥n (%)': '{:.2f}%'
            }).apply(lambda row: ['color: #2ecc71' if 98 <= row['Recuperaci√≥n (%)'] <= 102 else 'color: #e74c3c' for _ in row], axis=1)
        )
        # Agregar una muestra (primeras 10 filas) al PDF con redondeo a 2 decimales
        datos_tabla = datos.head(10).copy()
        tabla_data = [list(datos_tabla.columns)]
        for _, row in datos_tabla.iterrows():
            fila = []
            for valor in row:
                if isinstance(valor, (int, float)):
                    fila.append(f"{valor:<15.2f}")
                else:
                    fila.append(f"{str(valor):<15}")
            tabla_data.append(fila)
        pdf_gen.add_table(tabla_data, title="Datos Detallados (Primeras 10 filas)")
        
        # Bot√≥n de descarga (se asume que la funci√≥n generar_descarga est√° definida)
        generar_descarga(datos)
    
    return True

def validar_columnas(datos, columnas):
    """Valida la presencia de columnas requeridas en el dataset"""
    faltantes = [col for col in columnas if col not in datos.columns]
    if faltantes:
        st.error(f"Columnas faltantes: {', '.join(faltantes)}")
        return False
    return True

def generar_descarga(datos):
    """Genera archivo Excel descargable con los resultados"""
    output = BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        datos.to_excel(writer, index=False, sheet_name='Resultados')
    
    st.download_button(
        label="üì• Descargar Resultados Completos",
        data=output.getvalue(),
        file_name="exactitud_analitica.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        help="Descarga todos los resultados en formato Excel"
    )

def evaluar_robustez(datos, pdf_gen):
    """
    Eval√∫a la robustez del m√©todo comparando la media de la respuesta en cada nivel
    de uno o varios factores con la media global. Se calcula la diferencia porcentual 
    absoluta y se determina si dicha variaci√≥n est√° dentro de un umbral preestablecido.
    
    Par√°metros:
      - datos (DataFrame): Debe contener las columnas ['Respuesta', 'D√≠a', 'Concentraci√≥n', 'Tipo', 'Analista'].
      - pdf_gen: Objeto para generar el PDF (m√©todos: add_section_title, add_text_block, add_table, capture_figure).
    
    Metodolog√≠a (adaptada de la gu√≠a CCYAC y Farmac√©uticos):
      1. Para cada factor seleccionado, se calcula la media global de 'Respuesta'.
      2. Se agrupa el conjunto de datos por el factor y se calcula la media en cada nivel.
      3. Se calcula la diferencia porcentual absoluta:
            d_i = |(Media del grupo - Media global) / Media global| * 100
      4. Se eval√∫a robustez si, para cada factor, el valor m√°ximo (o promedio) de d_i es menor o igual al umbral:
            - Por ejemplo, umbral = 2% para m√©todos cromatogr√°ficos/volum√©tricos,
                          3% para m√©todos qu√≠micos/espectrofotom√©tricos,
                          5% para m√©todos biol√≥gicos.
    
    Los resultados se muestran en Streamlit y se registran en el PDF.
    """
    sns.set_theme(style="whitegrid", palette="pastel")
    st.header("üß™ An√°lisis de Robustez")
    pdf_gen.add_section_title("An√°lisis de Robustez")
    
    # Mostrar metodolog√≠a (adaptada)
    with st.expander("üìö Metodolog√≠a", expanded=False):
        metodologia = (
            "**Metodolog√≠a para Evaluar Robustez:**\n"
            "1. Calcular la media global de 'Respuesta' (valor de referencia).\n"
            "2. Para cada nivel del factor a evaluar, calcular la media de 'Respuesta'.\n"
            "3. Calcular la diferencia porcentual absoluta respecto a la media global:\n"
            "      d_i = |(Media del grupo - Media global) / Media global| * 100\n"
            "4. El m√©todo se considera robusto respecto a ese factor si la diferencia m√°xima (o promedio) "
            "es ‚â§ umbral (ej. 2% para m√©todos cromatogr√°ficos, 3% para m√©todos qu√≠micos, 5% para biol√≥gicos).\n"
            "5. Se reportan estos resultados y se generan gr√°ficos de la distribuci√≥n de 'Respuesta' por nivel."
        )
        st.markdown(metodologia)
        pdf_gen.add_subsection("Metodolog√≠a")
        pdf_gen.add_text_block(metodologia)
    
    # Validar columnas
    required_cols = ['Respuesta', 'D√≠a', 'Concentraci√≥n', 'Tipo', 'Analista', 'pH']
    for col in required_cols:
        if col not in datos.columns:
            st.error(f"Falta la columna '{col}' en el DataFrame.")
            pdf_gen.add_text_block(f"‚úò Error: Falta la columna '{col}' en el DataFrame.", style="error")
            return False

    # Conversi√≥n num√©rica
    for col in ['Respuesta', 'Concentraci√≥n']:
        datos[col] = pd.to_numeric(datos[col], errors='coerce')
    datos.dropna(subset=['Respuesta', 'Concentraci√≥n'], inplace=True)
    
    # Permitir al usuario seleccionar uno o varios factores para evaluar robustez
    opciones = ['D√≠a', 'Concentraci√≥n', 'Analista','pH']  # Evitamos 'Tipo' pues usualmente se usa para clasificar muestras/est√°ndares
    factores_seleccionados = st.multiselect("Selecciona los factores a evaluar en la robustez:", options=opciones, default=['D√≠a'])
    pdf_gen.add_text_block("Factores a evaluar: " + ", ".join(factores_seleccionados))
    
    # Selecci√≥n del tipo de m√©todo para robustez (para definir el umbral)
    tipo_metodo = st.selectbox("Selecciona el tipo de m√©todo:", 
                               options=["cromatografico", "quimico", "espectrofotometrico", "biologico"])
    if tipo_metodo == "cromatografico":
        umbral = 2.0
    elif tipo_metodo in ["quimico", "espectrofotometrico"]:
        umbral = 3.0
    elif tipo_metodo == "biologico":
        umbral = 5.0
    else:
        umbral = 2.0

    pdf_gen.add_text_block(f"Tipo de m√©todo seleccionado: {tipo_metodo}. Umbral para robustez: {umbral}%.")
    
    # Calcular la media global de la respuesta en el dataset
    media_global = datos['Respuesta'].mean()
    st.write(f"**Media global de 'Respuesta':** {media_global:.4f}")
    pdf_gen.add_text_block(f"Media global de 'Respuesta': {media_global:.4f}")
    
    # Para cada factor seleccionado, agrupar y calcular diferencias relativas
    resumen_resultados = []
    for factor in factores_seleccionados:
        st.subheader(f"An√°lisis de Robustez - Factor: {factor}")
        pdf_gen.add_subsection(f"Robustez - Factor: {factor}")
        # Agrupar datos por el factor y calcular la media para cada nivel
        grupos = datos.groupby(factor)['Respuesta'].mean().reset_index()
        grupos['Diferencia (%)'] = abs((grupos['Respuesta'] - media_global) / media_global * 100)
        st.dataframe(grupos)
        
        # Graficar: Boxplot de 'Respuesta' por nivel del factor
        fig, ax = plt.subplots(figsize=(8, 4))
        sns.boxplot(x=factor, y='Respuesta', data=datos, ax=ax)
        ax.axhline(media_global, color='red', linestyle='--', label=f'Media Global ({media_global:.2f})')
        ax.set_title(f"Distribuci√≥n de 'Respuesta' por {factor}")
        ax.legend()
        st.pyplot(fig)
        pdf_gen.capture_figure(fig, f"robustez_boxplot_{factor}")
        plt.close(fig)
        
        # Evaluar robustez: Se considera robusto si la diferencia m√°xima (o promedio) es ‚â§ umbral.
        diffs = grupos['Diferencia (%)']
        max_diff = diffs.max()
        avg_diff = diffs.mean()
        robusto = max_diff <= umbral
        st.markdown(
            f"**Resultados para el factor {factor}:**\n"
            f"- Diferencia m√°xima: {max_diff:.2f}%\n"
            f"- Diferencia promedio: {avg_diff:.2f}%\n"
            f"- **Conclusi√≥n:** {'M√©todo Robusto' if robusto else 'Requiere Atenci√≥n'}"
        )
        pdf_gen.add_text_block(
            f"Resultados para el factor {factor}:\n"
            f"- Diferencia m√°xima: {max_diff:.2f}%\n"
            f"- Diferencia promedio: {avg_diff:.2f}%\n"
            f"Conclusi√≥n: {'M√©todo Robusto' if robusto else 'Requiere Atenci√≥n'}."
        )
        resumen_resultados.append([factor, f"{max_diff:.2f}%", f"{avg_diff:.2f}%", "Robusto" if robusto else "No Robusto"])
    
    # Agregar un resumen general al PDF
    if resumen_resultados:
        tabla_resumen = [["Factor", "Dif. M√°x", "Dif. Promedio", "Robustez"]]
        tabla_resumen.extend(resumen_resultados)
        pdf_gen.add_table(tabla_resumen, title="Resumen de Robustez por Factor")
    
    return True
def agrupar_valores(valores, umbral=1.0):
    """
    Agrupa una lista ordenada de valores en grupos donde la diferencia entre elementos consecutivos es <= umbral.
    Devuelve una lista de grupos (cada grupo es una lista de valores).
    """
    grupos = []
    if not valores:
        return grupos
    grupo_actual = [valores[0]]
    for v in valores[1:]:
        if v - grupo_actual[-1] <= umbral:
            grupo_actual.append(v)
        else:
            grupos.append(grupo_actual)
            grupo_actual = [v]
    grupos.append(grupo_actual)
    return grupos

def evaluar_estabilidad(datos, pdf_gen, test_type="assay"):
    """
    Eval√∫a la estabilidad del m√©todo comparando la respuesta anal√≠tica a lo largo del tiempo 
    con la medici√≥n inicial (baseline). Se agrupan autom√°ticamente los valores de 'Concentraci√≥n'
    utilizando una tolerancia de ¬±1 y, para cada grupo, se calcula el % de recuperaci√≥n, la diferencia 
    respecto a 100% y el coeficiente de variaci√≥n (CV).

    Adem√°s, se permite seleccionar interact√≠vamente el tipo de m√©todo para definir el umbral de aceptaci√≥n:
       - Cromatogr√°fico: umbral de 2%
       - Qu√≠mico: umbral de 3%
       - Biol√≥gico: umbral de 5%
       
    Par√°metros:
      - datos (DataFrame): Debe contener al menos las columnas ['D√≠a', 'Respuesta', 'Concentraci√≥n'].
         Se asume que 'D√≠a' es num√©rico o de tipo datetime (en cuyo caso se convierte a d√≠as transcurridos).
      - pdf_gen: Objeto para generar el PDF (con m√©todos como add_section_title, add_text_block, add_table, capture_figure, etc.).
      - test_type (str): Tipo de test; se incluye para compatibilidad (por defecto "assay").

    La funci√≥n genera gr√°ficos y tablas en Streamlit y documenta los resultados en el PDF.
    """
    sns.set_theme(style="whitegrid", palette="pastel")
    st.header("üß™ An√°lisis de Estabilidad por Grupo de Concentraci√≥n")
    pdf_gen.add_section_title("An√°lisis de Estabilidad por Grupo de Concentraci√≥n")
    pdf_gen.add_text_block(
        "Este reporte eval√∫a la estabilidad del m√©todo midiendo la respuesta anal√≠tica a lo largo del tiempo "
        "y compar√°ndola con la medici√≥n inicial (baseline). Los datos se agrupan autom√°ticamente en rangos de "
        "concentraci√≥n utilizando una tolerancia de ¬±1 unidad. Para cada rango se calcula el % de recuperaci√≥n, la "
        "diferencia respecto a 100% y el CV. Se permite seleccionar el tipo de m√©todo para definir el umbral de "
        "aceptaci√≥n."
    )

    # 1. Validar columnas requeridas
    required_cols = ['D√≠a', 'Respuesta', 'Concentraci√≥n']
    for col in required_cols:
        if col not in datos.columns:
            st.error(f"Falta la columna '{col}' en el DataFrame.")
            pdf_gen.add_text_block(f"‚úò Error: Falta la columna '{col}' en el DataFrame.", style="error")
            return False

    # 2. Conversi√≥n num√©rica y limpieza
    for col in ['Respuesta', 'Concentraci√≥n']:
        datos[col] = pd.to_numeric(datos[col], errors='coerce')
    datos.dropna(subset=['Respuesta', 'Concentraci√≥n'], inplace=True)

    # 3. Procesar la columna 'D√≠a'
    try:
        if np.issubdtype(datos['D√≠a'].dtype, np.datetime64):
            datos['D√≠a_num'] = (datos['D√≠a'] - datos['D√≠a'].min()).dt.days
        else:
            datos['D√≠a_num'] = pd.to_numeric(datos['D√≠a'], errors='coerce')
    except Exception as e:
        st.error(f"Error al convertir 'D√≠a': {str(e)}")
        pdf_gen.add_text_block(f"‚úò Error al convertir 'D√≠a': {str(e)}", style="error")
        return False
    datos.dropna(subset=['D√≠a_num'], inplace=True)

    # 4. Agrupar autom√°ticamente los valores de concentraci√≥n usando tolerancia ¬±1
    unique_vals = sorted(datos['Concentraci√≥n'].unique())
    grupos_conc = agrupar_valores(unique_vals, umbral=1.0)
    mapping = {}
    for grupo in grupos_conc:
        rep = np.median(grupo)
        for v in grupo:
            mapping[v] = rep
    datos['Rango'] = datos['Concentraci√≥n'].map(mapping).apply(lambda x: f"{x:.2f}")

    # Mostrar la agrupaci√≥n para depuraci√≥n
    st.subheader("Agrupaci√≥n de Concentraciones")
    df_grupos = datos[['Concentraci√≥n', 'Rango']].drop_duplicates().sort_values(by='Concentraci√≥n')
    st.dataframe(df_grupos)
    tabla_grupos = [["Concentraci√≥n", "Rango asignado"]]
    for _, row in df_grupos.iterrows():
        tabla_grupos.append([f"{row['Concentraci√≥n']:.2f}", row['Rango']])
    pdf_gen.add_table(tabla_grupos, title="Agrupaci√≥n de Concentraciones (Autom√°tica)")

    # 5. Seleccionar el tipo de m√©todo (para establecer umbral)
    metodo_seleccionado = st.selectbox(
        "Seleccione el tipo de m√©todo:",
        options=["cromatografico", "quimico", "biologico"],
        index=0
    )
    if metodo_seleccionado == "cromatografico":
        umbral = 2.0
    elif metodo_seleccionado == "quimico":
        umbral = 3.0
    elif metodo_seleccionado == "biologico":
        umbral = 5.0
    else:
        umbral = 2.0
    st.write(f"Umbral de aceptaci√≥n para el m√©todo {metodo_seleccionado}: {umbral}%")
    pdf_gen.add_text_block(f"Tipo de m√©todo seleccionado: {metodo_seleccionado}. Umbral de aceptaci√≥n: {umbral}%.", style="info")

    # 6. Permitir al usuario seleccionar un factor variable adicional (opcional)
    columnas_factor = [col for col in datos.columns if col not in ['D√≠a', 'D√≠a_num', 'Respuesta', 'Concentraci√≥n', 'Rango']]
    if columnas_factor:
        factor_variable = st.selectbox("Seleccione un factor variable adicional (opcional):", ["Ninguno"] + columnas_factor)
    else:
        factor_variable = "Ninguno"
    pdf_gen.add_text_block(f"Factor variable seleccionado: {factor_variable}", style="info")

    # 7. Iterar sobre cada rango y realizar el an√°lisis de estabilidad
    resultados_totales = []
    rangos_disponibles = sorted(datos['Rango'].unique(), key=lambda x: float(x))
    for rango_label in rangos_disponibles:
        df_rango = datos[datos['Rango'] == rango_label].copy()
        if df_rango.empty:
            continue

        st.markdown(f"### An√°lisis para el Rango {rango_label}")
        pdf_gen.add_subsection(f"Rango {rango_label}")

        # Agrupar por d√≠a en este rango
        resumen = df_rango.groupby('D√≠a_num')['Respuesta'].agg(['mean', 'std', 'count']).reset_index()
        resumen.rename(columns={'mean': 'Media', 'std': 'DE', 'count': 'N'}, inplace=True)

        # Baseline: se toma la medici√≥n del d√≠a inicial
        baseline_row = resumen.loc[resumen['D√≠a_num'].idxmin()]
        baseline = baseline_row['Media']
        if baseline == 0:
            st.error("La media en el d√≠a inicial es 0, no es posible calcular la recuperaci√≥n.")
            pdf_gen.add_text_block("‚úò Error: La media en el tiempo inicial es 0.", style="error")
            continue

        resumen['Recuperaci√≥n (%)'] = (resumen['Media'] / baseline) * 100
        resumen['Diferencia (%)'] = abs(resumen['Recuperaci√≥n (%)'] - 100)
        resumen['CV'] = (resumen['DE'] / resumen['Media']) * 100

        st.dataframe(resumen)
        
        # Gr√°ficos para este rango
        fig, ax = plt.subplots(1, 2, figsize=(14, 5))
        sns.lineplot(data=resumen, x='D√≠a_num', y='Recuperaci√≥n (%)', marker='o', ax=ax[0])
        ax[0].axhline(100, color='red', linestyle='--', label="100% (Baseline)")
        ax[0].axhline(100+umbral, color='gray', linestyle='--', label=f"100% ¬± {umbral}%")
        ax[0].axhline(100-umbral, color='gray', linestyle='--')
        ax[0].set_title(f"Recuperaci√≥n (%) vs. Tiempo - Rango {rango_label}")
        ax[0].set_xlabel("D√≠a (num√©rico)")
        ax[0].set_ylabel("Recuperaci√≥n (%)")
        ax[0].legend()
        
        sns.barplot(data=resumen, x='D√≠a_num', y='CV', ax=ax[1], palette='Blues', edgecolor='black')
        ax[1].axhline(umbral, color='red', linestyle='--', label=f"Umbral {umbral}%")
        ax[1].set_title(f"Variabilidad (CV) - Rango {rango_label}")
        ax[1].set_xlabel("D√≠a (num√©rico)")
        ax[1].set_ylabel("CV (%)")
        ax[1].legend()
        
        plt.tight_layout()
        st.pyplot(fig)
        pdf_gen.capture_figure(fig, f"estabilidad_{rango_label}")
        plt.close(fig)
        
        # An√°lisis complementario del factor variable, si se seleccion√≥
        if factor_variable != "Ninguno":
            st.markdown(f"#### An√°lisis del factor variable '{factor_variable}' en el rango {rango_label}")
            pdf_gen.add_text_block(f"An√°lisis del factor variable '{factor_variable}' en el rango {rango_label}.", style="info")
            df_factor = df_rango.dropna(subset=[factor_variable])
            resumen_factor = df_factor.groupby(factor_variable)['Respuesta'].mean().reset_index()
            st.dataframe(resumen_factor)
            fig_factor, ax_factor = plt.subplots(figsize=(6, 4))
            sns.barplot(data=resumen_factor, x=factor_variable, y='Respuesta', ax=ax_factor, palette='viridis')
            ax_factor.set_title(f"Media de Respuesta por '{factor_variable}' - Rango {rango_label}")
            plt.xticks(rotation=45)
            st.pyplot(fig_factor)
            pdf_gen.capture_figure(fig_factor, f"factor_{factor_variable}_{rango_label}")
            plt.close(fig_factor)
        
        # Registro de m√©tricas clave para este rango
        resultado = {
            'Rango': rango_label,
            'Recuperaci√≥n M√≠nima (%)': f"{resumen['Recuperaci√≥n (%)'].min():.2f}%",
            'Diferencia M√°xima (%)': f"{resumen['Diferencia (%)'].max():.2f}%",
            'CV M√°ximo (%)': f"{resumen['CV'].max():.2f}%"
        }
        resultados_totales.append(resultado)
    
    # Reporte consolidado
    if resultados_totales:
        tabla_header = ["Rango", "Recup. M√≠nima", "Dif. M√°xima", "CV M√°ximo"]
        tabla_data = [[r['Rango'], r['Recuperaci√≥n M√≠nima (%)'], r['Diferencia M√°xima (%)'], r['CV M√°ximo (%)']] for r in resultados_totales]
        pdf_gen.add_table([tabla_header] + tabla_data, title="Resumen de Estabilidad por Rango")
        todas_estables = all(float(r['Diferencia M√°xima (%)'].replace('%','')) <= umbral for r in resultados_totales)
        conclusion = "El m√©todo es estable en todos los rangos." if todas_estables else "El m√©todo presenta variaciones superiores al umbral en algunos rangos."
        st.markdown(f"### Conclusi√≥n: {conclusion}")
        pdf_gen.add_text_block(f"Conclusi√≥n de estabilidad: {conclusion}", style="info")
        return resultados_totales
    else:
        st.warning("No se pudieron obtener resultados de estabilidad en ning√∫n rango.")
        pdf_gen.add_text_block("‚ö†Ô∏è No se obtuvieron resultados de estabilidad en ning√∫n rango.", style="warning")
        return False
    
if modulo == "Linealidad y Rango":
    st.header("An√°lisis de Linealidad y Rango")
    st.info("""
        **Datos requeridos para este m√≥dulo:**
        - **Concentraci√≥n:** Concentraciones de las soluciones est√°ndar.
        - **Respuesta:** Valores de Respuesta medidos.
        - **Tipo:** Identificar si es "Est√°ndar" o "Muestra".
        - **D√≠a:** Identificar el d√≠a de la medici√≥n.""")  

    img_path = imagenes_dir / "muestra.png"
    st.image(str(img_path), caption="Estructura requerida: Columnas 'D√≠a', 'Concentraci√≥n', 'Respuesta', 'Tipo'")

    
    datos = st.file_uploader("Sube tu archivo:", type=['csv', 'xlsx'])
    if procesar_archivo(datos, calcular_linealidad, modulo):
        st.success("An√°lisis completado!")

    pdf = st.session_state.get('current_pdf')
    if pdf:
            st.download_button(
                label="‚¨áÔ∏è Descargar Reporte Completo",
                data=pdf,
                file_name=f"Reporte_{modulo.replace(' ', '_')}.pdf",
                mime="application/pdf"
            )
    

elif modulo == "L√≠mites de Detecci√≥n y Cuantificaci√≥n":
    st.header("C√°lculo de LOD y LOQ")
    st.info("""
        **Datos requeridos para este m√≥dulo:**
        - **Concentraci√≥n:** Concentraciones de las soluciones est√°ndar.
        - **Respuesta:** Valores de Respuesta medidos.
        - **Tipo:** Identificar si es "Est√°ndar" o "Muestra".
        - **D√≠a:** D√≠a en que se realiz√≥ la medici√≥n.
        """)  

    img_path = imagenes_dir / "muestra.png"
    st.image(str(img_path), caption="Estructura requerida: Columnas 'D√≠a', 'Concentraci√≥n', 'Respuesta', 'Tipo'")
    datos = st.file_uploader("Sube tu archivo:", type=['csv', 'xlsx'])
    
    if datos:
        if procesar_archivo(datos, [calcular_lod_loq, graficar_curva_calibracion_streamlit], "L√≠mites de Detecci√≥n y Cuantificaci√≥n"):
            st.success("¬°An√°lisis completado!")
            if 'current_pdf' in st.session_state:
                st.download_button(
                    label="Descargar PDF",
                    data=st.session_state.current_pdf,
                    file_name="reporte_limites.pdf",
                    mime="application/pdf"
                )


# M√≥dulo de Precisi√≥n

elif modulo == "Precisi√≥n (Repetibilidad e Intermedia)":
    st.header("Evaluaci√≥n de Precisi√≥n")
    st.info(
        """
        **Datos requeridos para este m√≥dulo:**
        - **Respuesta:** Datos de Respuesta agrupados por d√≠as y repeticiones.
        """
    )
    img_path = imagenes_dir / "muestra.png"
    st.image(str(img_path), caption="Estructura requerida: Columnas 'D√≠a', 'Concentraci√≥n', 'Respuesta', 'Tipo'")
    datos = st.file_uploader("Sube tu archivo:", type=['csv', 'xlsx'])
    
    if datos:
        if procesar_archivo(datos, [calcular_precision_por_rango], "Precisi√≥n (Repetibilidad e Intermedia)"):
            st.success("¬°An√°lisis completado!")
            if 'current_pdf' in st.session_state:
                st.download_button(
                    label="Descargar PDF",
                    data=st.session_state.current_pdf,
                    file_name="reporte_Precisi√≥n.pdf",
                    mime="application/pdf"
                )
    

# M√≥dulo de Exactitud
elif modulo == "Exactitud (Recuperaci√≥n)":
    st.header("C√°lculo de Exactitud")
    st.info(
        """
        **Datos requeridos para este m√≥dulo:**
        - **D√≠a:** D√≠a en que se realiz√≥ la medici√≥n.
        - **Concentraci√≥n Te√≥rica:** Concentraci√≥n fortificada conocida.
        - **Concentraci√≥n Medida:** Concentraci√≥n obtenida tras el an√°lisis experimental.
        """
    )
    img_path = imagenes_dir / "conc_exac.png"
    st.image(str(img_path), caption="Estructura requerida: Columnas 'Concentraci√≥n Teorica', 'Concentraci√≥n Real', 'D√≠a'")
    datos = st.file_uploader("Sube tu archivo:", type=['csv', 'xlsx'])
    
    if datos:
        if procesar_archivo(datos, [calcular_exactitud], "Exactitud y recuperaci√≥n"):
            st.success("¬°An√°lisis completado!")
            if 'current_pdf' in st.session_state:
                st.download_button(
                    label="Descargar PDF",
                    data=st.session_state.current_pdf,
                    file_name="reporte_exactitud.pdf",
                    mime="application/pdf"
                )

# M√≥dulo de Robustez
elif modulo == "Robustez":
    st.header("Evaluaci√≥n de Robustez")
    st.info("""
        **Datos requeridos para este m√≥dulo:**
        - **Factores variables:** Datos que representan condiciones variables del experimento.
        - **Resultados:** Datos de resultados obtenidos bajo dichas condiciones.
        """) 
    img_path = imagenes_dir / "muestra.png"
    st.image(str(img_path), caption="Estructura requerida: Columnas 'D√≠a', 'Concentraci√≥n', 'Respuesta', 'Tipo'")
    datos = st.file_uploader("Sube tu archivo:", type=['csv', 'xlsx'])
    
    if datos:
        if procesar_archivo(datos, [evaluar_robustez], "Robustez del Metodo"):
            st.success("¬°An√°lisis completado!")
            if 'current_pdf' in st.session_state:
                st.download_button(
                    label="Descargar PDF",
                    data=st.session_state.current_pdf,
                    file_name="reporte_robustez.pdf",
                    mime="application/pdf"
                )

elif modulo == "Estabilidad":
    st.header("Evaluaci√≥n de Estabilidad")
    st.info("""
        **Datos requeridos para este m√≥dulo:**
        - **D√≠a:** D√≠a de la medici√≥n (num√©rico o fecha)
        - **Respuesta:** Valores de respuesta anal√≠tica
        - **Tipo:** Clasificaci√≥n de la muestra (Ej: Est√°ndar, Muestra)
        - **Factores Variables:** Columnas adicionales para an√°lisis multivariable
        """)

    st.image(str(imagenes_dir / "muestra.png"), caption="Estructura requerida")
    datos = st.file_uploader("Sube tu archivo:", type=['csv', 'xlsx'])
    
    if datos:
        # Procesar con manejo de PDF integrado
        if procesar_archivo(datos, [evaluar_estabilidad], "Estabilidad del M√©todo"):
            st.success("¬°An√°lisis completado!")
            if 'current_pdf' in st.session_state:
                st.download_button(
                    label="Descargar PDF",
                    data=st.session_state.current_pdf.getvalue(),
                    file_name="reporte_estabilidad.pdf",
                    mime="application/pdf"
                )