import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import linregress, f_oneway
import streamlit as st
from io import BytesIO
from pathlib import Path
from matplotlib.figure import Figure
import plotly.express as px
from fpdf import FPDF
import base64
from datetime import datetime
from statsmodels.stats.multicomp import pairwise_tukeyhsd
from statsmodels.formula.api import ols
from statsmodels.stats.anova import anova_lm

# Obtener la ruta del directorio actual
current_dir = Path(__file__).parent if "__file__" in locals() else Path.cwd()
imagenes_dir = current_dir / "img"

# Page Configuration
st.set_page_config(
    page_title="Validaci√≥n UV-Vis",
    page_icon="https://upload.wikimedia.org/wikipedia/commons/thumb/6/68/Escudo_CUCEI.svg/424px-Escudo_CUCEI.svg.png",
    layout="wide"  # Centers all content
)
st.markdown(
    """
    <style>
    body {
        background-color: black;
        color: white;
    }
    </style>
    """,
    unsafe_allow_html=True
)

# Custom CSS for title and footer
st.markdown("""
    <style>
    /* Title container styling */
    .title-container {
        display: flex;
        justify-content: center; /* Center the title and logo */
        align-items: center;
        gap: 10px;
        margin-bottom: 20px; /* Spacing below title */
    }
    .title-container img:first-child {
        width: 120px; /* Adjust first icon size */
        height: auto;
    }
    .title-container img:last-child {
        width: 200px; /* Adjust second icon size */
        height: auto;
    }

    /* Footer styling */
    .footer {
        position: fixed;
        bottom: 0;
        left: 0;
        width: 100%;
        background-color: rgba(0, 0, 0, 0.05); /* Light background */
        color: gray;
        text-align: center;
        padding: 5px 15px;
        font-size: small;
        opacity: 0.8;
    }
    </style>
""", unsafe_allow_html=True)

# Title with Icon
st.markdown("""
    <div class="title-container">
        <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/5f/Escudo_UdeG.svg/662px-Escudo_UdeG.svg.png" alt="UDG Logo">
        <h1>Validaci√≥n de M√©todos Anal√≠ticos - Espectrofotometr√≠a UV-Vis</h1>
        <img src="https://practicas.cucei.udg.mx/dist/imagenes/logo_cucei_blanco.png" alt="CUCEI Logo">
    </div>
""", unsafe_allow_html=True)

# Footer
st.markdown("""
    <div class="footer">
        2025 - Luis Angel Cardenas Medina
    </div>
""", unsafe_allow_html=True)


# M√≥dulos disponibles
modulo = st.sidebar.selectbox(
    "Selecciona el m√≥dulo de an√°lisis:",
    [
        "Linealidad y Rango",
        "L√≠mites de Detecci√≥n y Cuantificaci√≥n",
        "Exactitud (Recuperaci√≥n)",
        "Precisi√≥n (Repetibilidad e Intermedia)",
        "Robustez",
        "Estabilidad"
    ]
)

# Funciones generales

def previsualizar_datos(datos):
    """Previsualiza los datos cargados en la interfaz."""
    st.write("### Vista previa de los datos cargados:")
    st.write(datos.head())
    st.write(f"**N√∫mero de filas:** {datos.shape[0]}, **N√∫mero de columnas:** {datos.shape[1]}")

def validar_columnas(datos, columnas_necesarias):
    """Valida que las columnas requeridas est√©n presentes en el archivo subido."""
    columnas_faltantes = [col for col in columnas_necesarias if col not in datos.columns]
    if columnas_faltantes:
        st.error(f"El archivo no contiene las siguientes columnas necesarias: {', '.join(columnas_faltantes)}")
        return False
    return True




def calcular_linealidad(datos):
    """Calcula la linealidad y rango del m√©todo considerando agrupaci√≥n por d√≠as."""
    # Configuraci√≥n inicial de estilo
    sns.set_theme(style="whitegrid", palette="muted")
    COLORS = ['#2ecc71', '#e74c3c']  # Verde y rojo para temas
    
    # Validaci√≥n mejorada
    columnas_necesarias = ['Concentraci√≥n', 'Absorbancia', 'Tipo', 'D√≠a']
    if not validar_columnas(datos, columnas_necesarias):
        return
    
    # Chequear valores num√©ricos
    if not np.issubdtype(datos['Concentraci√≥n'].dtype, np.number) or \
       not np.issubdtype(datos['Absorbancia'].dtype, np.number):
        st.error("Las columnas 'Concentraci√≥n' y 'Absorbancia' deben ser num√©ricas")
        return

    for dia, grupo_dia in datos.groupby('D√≠a'):
        with st.container():
            st.markdown(f"## üìÖ D√≠a {dia}")
            
            # Secci√≥n de est√°ndares
            estandar = grupo_dia[grupo_dia['Tipo'] == 'Est√°ndar']
            if estandar.empty:
                st.warning(f"‚ö†Ô∏è No se encontraron datos de Est√°ndar para el D√≠a {dia}.")
                continue
                
            # Procesamiento de datos
            estandar_promedio = estandar.groupby('Concentraci√≥n')['Absorbancia'].mean().reset_index()
            
            try:
                # C√°lculo de regresi√≥n con manejo de errores
                regresion = linregress(estandar_promedio['Concentraci√≥n'], estandar_promedio['Absorbancia'])
                slope = regresion.slope
                intercept = regresion.intercept
                r_value = regresion.rvalue
                p_value = regresion.pvalue
                predicciones = slope * estandar_promedio['Concentraci√≥n'] + intercept
                residuales = estandar_promedio['Absorbancia'] - predicciones
            except Exception as e:
                st.error(f"‚ùå Error en an√°lisis de regresi√≥n: {str(e)}")
                continue

            # Mostrar m√©tricas en columnas
            col1, col2 = st.columns(2)
            with col1:
                st.markdown("### üìä M√©tricas de Regresi√≥n")
                st.metric("Coeficiente de Determinaci√≥n (R¬≤)", f"{r_value**2:.4f}")
                st.metric("Pendiente (Slope)", f"{slope:.4f}")
                st.metric("Intercepto", f"{intercept:.4f}")
                
            with col2:
                st.markdown("### üìà Evaluaci√≥n de Calidad")
                st.metric("Coeficiente de Correlaci√≥n (R)", f"{r_value:.4f}")
                st.metric("Valor p", f"{p_value:.4e}")
                cumplimiento = r_value**2 >= 0.995
                st.metric("Cumplimiento ICH Q2(R¬≤ ‚â• 0.995)", 
                        "‚úÖ Cumple" if cumplimiento else "‚ùå No Cumple",
                        delta=f"{r_value**2 - 0.995:.4f}" if not cumplimiento else None)

            # Gr√°ficos profesionales con estilo unificado
            fig = plt.figure(figsize=(14, 6), facecolor='#f8f9fa')
            gs = fig.add_gridspec(1, 2)
            
            # Gr√°fico de Regresi√≥n
            ax1 = fig.add_subplot(gs[0, 0])
            sns.regplot(x=estandar_promedio['Concentraci√≥n'], y=estandar_promedio['Absorbancia'], 
                        ax=ax1, ci=95, scatter_kws={'s': 80, 'edgecolor': 'black', 'alpha': 0.8},
                        line_kws={'color': COLORS[0], 'lw': 2, 'alpha': 0.8})
            ax1.set_title(f"Regresi√≥n Lineal - D√≠a {dia}", fontsize=14, pad=20)
            ax1.set_xlabel("Concentraci√≥n (Œºg/mL)", fontsize=12)
            ax1.set_ylabel("Absorbancia (UA)", fontsize=12)
            ax1.grid(True, linestyle='--', alpha=0.7)
            
            # Anotaciones en el gr√°fico
            textstr = '\n'.join((
                f'$R^2 = {r_value**2:.4f}$',
                f'$y = {slope:.4f}x + {intercept:.4f}$'))
            ax1.text(0.05, 0.95, textstr, transform=ax1.transAxes,
                    fontsize=12, verticalalignment='top',
                    bbox=dict(boxstyle='round', facecolor='white', alpha=0.8))

            # Gr√°fico de Residuales
            ax2 = fig.add_subplot(gs[0, 1])
            residual_plot = sns.residplot(x=estandar_promedio['Concentraci√≥n'], y=residuales,
                                        ax=ax2, lowess=True, 
                                        scatter_kws={'s': 60, 'color': COLORS[1], 'edgecolor': 'black'},
                                        line_kws={'color': COLORS[0], 'lw': 2})
            ax2.axhline(0, color='black', linestyle='--', lw=1.5)
            ax2.set_title(f"An√°lisis de Residuales - D√≠a {dia}", fontsize=14, pad=20)
            ax2.set_xlabel("Concentraci√≥n (Œºg/mL)", fontsize=12)
            ax2.set_ylabel("Residuales", fontsize=12)
            ax2.grid(True, linestyle='--', alpha=0.7)
            
            # Destacar outliers
            outliers = np.abs(residuales) > 2 * residuales.std()
            if outliers.any():
                ax2.scatter(estandar_promedio['Concentraci√≥n'][outliers], 
                          residuales[outliers], 
                          s=100, edgecolor='black', 
                          facecolor='none', linewidth=1.5,
                          label='Outliers (¬±2œÉ)')
                ax2.legend()

            plt.tight_layout()
            st.pyplot(fig)
            plt.close(fig)

            # An√°lisis de muestras con mejor visualizaci√≥n
            muestra = grupo_dia[grupo_dia['Tipo'] == 'Muestra']
            if not muestra.empty:
                with st.expander(f"üß™ Resultados de Muestras - D√≠a {dia}", expanded=False):
                    try:
                        muestra['Concentraci√≥n Estimada'] = (muestra['Absorbancia'] - intercept) / slope
                        
                        # Gr√°fico de resultados
                        fig_m = plt.figure(figsize=(10, 5))
                        sns.scatterplot(x=muestra['Concentraci√≥n Estimada'], 
                                      y=muestra['Absorbancia'],
                                      s=100, edgecolor='black',
                                      color=COLORS[0], alpha=0.8)
                        plt.title(f"Concentraciones Estimadas - D√≠a {dia}", fontsize=14)
                        plt.xlabel("Concentraci√≥n Estimada (Œºg/mL)", fontsize=12)
                        plt.ylabel("Absorbancia (UA)", fontsize=12)
                        plt.grid(True, linestyle='--', alpha=0.5)
                        st.pyplot(fig_m)
                        plt.close(fig_m)
                        
                        # Tabla de resultados
                        st.dataframe(
                            muestra[['Absorbancia', 'Concentraci√≥n Estimada']]
                            .style.format("{:.4f}")
                            .highlight_between(subset=['Concentraci√≥n Estimada'], 
                                             color='#f8d7da',  # Rojo claro
                                             props='color: #721c24;',  # Texto oscuro
                                             axis=None)
                        )
                    except ZeroDivisionError:
                        st.error("Error: Pendiente cero, no se puede calcular concentraci√≥n")

            # Secci√≥n de interpretaci√≥n interactiva
            with st.expander("üîç Gu√≠a de Interpretaci√≥n", expanded=False):
                st.markdown("""
                **An√°lisis de Residuales:**
                - ‚úÖ **Distribuci√≥n aleatoria:** Buen ajuste del modelo
                - ‚ö†Ô∏è **Patr√≥n no lineal:** Considerar modelo no lineal
                - ‚ùå **Efecto embudo:** Varianza no constante
                - üìå **Outliers:** Verificar mediciones sospechosas

                **Criterios ICH Q2:**
                - $R^2 ‚â• 0.995$ para validaci√≥n
                - Residuales < ¬±2œÉ (95% confianza)
                """)

def calcular_lod_loq(datos):
    """Calcula LOD y LOQ con visualizaci√≥n mejorada y validaci√≥n extendida."""
    # Configuraci√≥n de estilo
    COLORS = ['#3498db', '#2ecc71', '#e74c3c']  # Azul, Verde, Rojo
    sns.set_theme(style="whitegrid", font_scale=0.95)
    
    # Validaci√≥n mejorada
    columnas_necesarias = ['D√≠a', 'Tipo', 'Concentraci√≥n', 'Absorbancia']
    if not validar_columnas(datos, columnas_necesarias):
        return
    
    # Chequear tipos num√©ricos
    if not np.issubdtype(datos['Concentraci√≥n'].dtype, np.number) or \
       not np.issubdtype(datos['Absorbancia'].dtype, np.number):
        st.error("‚ùå Las columnas 'Concentraci√≥n' y 'Absorbancia' deben ser num√©ricas")
        return

    datos_estandar = datos[datos['Tipo'] == 'Est√°ndar']
    if datos_estandar.empty:
        st.error("‚ùå No se encontraron datos de tipo 'Est√°ndar'")
        return

    with st.expander("üìä M√©todo de C√°lculo ICH Q2", expanded=True):
        st.markdown("""
        **F√≥rmulas aplicadas:**
        - $LOD = \\frac{3.3 \\times œÉ}{S}$  
        - $LOQ = \\frac{10 \\times œÉ}{S}$  
        Donde:
        - œÉ: Desviaci√≥n est√°ndar de los residuales
        - S: Pendiente de la curva de calibraci√≥n
        """)

    dias_unicos = datos_estandar['D√≠a'].unique()
    for dia in dias_unicos:
        with st.container():
            st.markdown(f"## üìÖ D√≠a {dia}")
            datos_dia = datos_estandar[datos_estandar['D√≠a'] == dia]
            
            if len(datos_dia) < 3:
                st.warning(f"‚ö†Ô∏è M√≠nimo 3 puntos requeridos para c√°lculo confiable (D√≠a {dia})")
                continue
                
            try:
                # C√°lculo completo de regresi√≥n
                regresion = linregress(datos_dia['Concentraci√≥n'], datos_dia['Absorbancia'])
                slope = regresion.slope
                intercept = regresion.intercept
                r_value = regresion.rvalue
                r_squared = r_value**2
                residuals = datos_dia['Absorbancia'] - (slope * datos_dia['Concentraci√≥n'] + intercept)
                std_dev = residuals.std()
                lod = (3.3 * std_dev) / slope if slope != 0 else None
                loq = (10 * std_dev) / slope if slope != 0 else None
                
                # Mostrar m√©tricas en columnas
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("Pendiente (S)", f"{slope:.4f}")
                    st.metric("R¬≤", f"{r_squared:.4f}")
                    
                with col2:
                    st.metric("LOD", f"{lod:.4f}", help="3.3œÉ/S")
                    st.metric("LOQ", f"{loq:.4f}", help="10œÉ/S")
                
                with col3:
                    rango_dinamico = datos_dia['Concentraci√≥n'].max() / lod if lod else 0
                    st.metric("Rango Din√°mico", 
                            f"{rango_dinamico:.1f}:1", 
                            help="Relaci√≥n LOQ:LOD recomendada ‚â• 3:1")
                    st.metric("Cumplimiento ICH", 
                            "‚úÖ" if rango_dinamico >= 3 else "‚ùå", 
                            delta="‚â•3:1" if rango_dinamico >=3 else None)

                # Gr√°fico de datos brutos
                with st.expander(f"üîç Datos Detallados - D√≠a {dia}", expanded=False):
                    fig = plt.figure(figsize=(10, 4))
                    ax = fig.add_subplot(111)
                    sns.scatterplot(data=datos_dia, x='Concentraci√≥n', y='Absorbancia',
                                   s=100, color=COLORS[0], edgecolor='black',
                                   ax=ax, label='Datos Experimentales')
                    ax.set_title(f"Datos Crudos - D√≠a {dia} (R¬≤ = {r_squared:.4f})", fontsize=14)
                    ax.set_xlabel("Concentraci√≥n (Œºg/mL)", fontsize=12)
                    ax.set_ylabel("Absorbancia (UA)", fontsize=12)
                    ax.grid(True, linestyle='--', alpha=0.5)
                    st.pyplot(fig)
                    plt.close(fig)
                    
            except Exception as e:
                st.error(f"‚ùå Error en D√≠a {dia}: {str(e)}")
                continue

def graficar_curva_calibracion_streamlit(datos):
    """Grafica curva de calibraci√≥n con estilo profesional y anotaciones."""
    # Configuraci√≥n de estilo
    COLORS = ['#2ecc71', '#3498db', '#e74c3c']  # Verde, Azul, Rojo
    plt.style.use('seaborn-talk')
    
    # Validaci√≥n de datos
    columnas_necesarias = ['D√≠a', 'Tipo', 'Concentraci√≥n', 'Absorbancia']
    if not validar_columnas(datos, columnas_necesarias):
        return

    datos_estandar = datos[datos['Tipo'] == 'Est√°ndar']
    if datos_estandar.empty:
        st.error("‚ùå No se encontraron datos de calibraci√≥n")
        return

    dias_unicos = datos_estandar['D√≠a'].unique()
    for dia in dias_unicos:
        with st.container():
            st.markdown(f"## üìà Curva de Calibraci√≥n - D√≠a {dia}")
            datos_dia = datos_estandar[datos_estandar['D√≠a'] == dia]
            
            if len(datos_dia) < 3:
                st.warning(f"‚ö†Ô∏è M√≠nimo 3 puntos recomendados para curva confiable (D√≠a {dia})")
                continue
                
            try:
                # C√°lculo completo de regresi√≥n
                regresion = linregress(datos_dia['Concentraci√≥n'], datos_dia['Absorbancia'])
                slope = regresion.slope
                intercept = regresion.intercept
                r_value = regresion.rvalue
                r_squared = r_value**2
                residuals = datos_dia['Absorbancia'] - (slope * datos_dia['Concentraci√≥n'] + intercept)
                std_dev = residuals.std()
                lod = (3.3 * std_dev) / slope if slope != 0 else None
                loq = (10 * std_dev) / slope if slope != 0 else None
                
                # Crear figura profesional
                fig = plt.figure(figsize=(10, 6), facecolor='#f8f9fa')
                ax = fig.add_subplot(111)
                
                # Gr√°fico principal
                sns.regplot(x=datos_dia['Concentraci√≥n'], y=datos_dia['Absorbancia'],
                           ax=ax, ci=95,
                           scatter_kws={'s': 80, 'color': COLORS[0], 'edgecolor': 'black', 'alpha': 0.8},
                           line_kws={'color': COLORS[1], 'lw': 2, 'alpha': 0.8})
                
                # L√≠neas de LOD/LOQ
                ax.axvline(lod, color=COLORS[2], linestyle='--', lw=2, alpha=0.8, label=f'LOD ({lod:.2f})')
                ax.axvline(loq, color=COLORS[1], linestyle='-.', lw=2, alpha=0.8, label=f'LOQ ({loq:.2f})')
                
                # Anotaciones profesionales
                textstr = '\n'.join((
                    f'$R^2 = {r_squared:.4f}$',
                    f'$y = {slope:.4f}x + {intercept:.4f}$',
                    f'œÉ = {std_dev:.4f}'))
                ax.text(0.05, 0.95, textstr, transform=ax.transAxes,
                       fontsize=12, verticalalignment='top',
                       bbox=dict(boxstyle='round', facecolor='white', alpha=0.8))
                
                # Estilo del gr√°fico
                ax.set_title(f"Curva de Calibraci√≥n - D√≠a {dia}", fontsize=16, pad=20)
                ax.set_xlabel("Concentraci√≥n (Œºg/mL)", fontsize=14)
                ax.set_ylabel("Absorbancia (UA)", fontsize=14)
                ax.grid(True, linestyle='--', alpha=0.5)
                ax.legend(loc='lower right', frameon=True, shadow=True)
                
                # Resaltar √°rea LOD/LOQ
                ax.axvspan(0, loq, facecolor='#f8d7da', alpha=0.3, label='Zona LOD/LOQ')
                
                st.pyplot(fig)
                plt.close(fig)
                
                # Tabla de datos adjunta
                with st.expander(f"üìã Datos de Calibraci√≥n - D√≠a {dia}"):
                    st.dataframe(
                        datos_dia[['Concentraci√≥n', 'Absorbancia']]
                        .style.format("{:.4f}")
                        .highlight_between(subset=['Concentraci√≥n'], 
                                         left=0, right=loq,
                                         color='#fff3cd')  # Amarillo claro
                    )
                    
            except Exception as e:
                st.error(f"‚ùå Error en D√≠a {dia}: {str(e)}")
                continue
def generar_reporte_ich(estandares, muestras):
    """Genera reporte PDF/Excel con resultados detallados"""
    # Implementaci√≥n personalizada seg√∫n necesidades
    pass

def calcular_precision(datos):
    """
    Eval√∫a la precisi√≥n seg√∫n ICH Q2 R1 para UV -Vis.
    """
    # Configuraci√≥n inicial
    sns.set_theme(style="whitegrid", palette="muted")
    st.header("üéØ An√°lisis de Precisi√≥n - UV-Vis")

    # Validaci√≥n y limpieza de datos
    for col in ['Concentraci√≥n', 'Absorbancia']:
        datos[col] = datos[col].replace('.', np.nan)
        datos[col] = pd.to_numeric(datos[col], errors='coerce')
    datos.dropna(subset=['Concentraci√≥n', 'Absorbancia'], inplace=True)

    # Separar datos
    estandares = datos[datos['Tipo'] == 'Est√°ndar'].copy()
    muestras = datos[datos['Tipo'] == 'Muestra'].copy()

    # Validaci√≥n de r√©plicas m√≠nimas
    conteo_replicas = estandares.groupby(['D√≠a', 'Concentraci√≥n']).size()
    if any(conteo_replicas < 3):
        st.error("‚ùå ICH Q2: Se requieren m√≠nimo 3 r√©plicas por concentraci√≥n y d√≠a")
        return

    # Procesamiento de curvas de calibraci√≥n
    dias_validos = []
    resultados_muestras = []
    with st.spinner('Procesando curvas de calibraci√≥n...'):
        for dia in estandares['D√≠a'].unique():
            try:
                est_dia = estandares[estandares['D√≠a'] == dia]
                slope, intercept, r_value, _, _ = linregress(
                    est_dia['Absorbancia'], est_dia['Concentraci√≥n']
                )
                if r_value**2 < 0.995:
                    st.warning(f"üö® D√≠a {dia} excluido - R¬≤: {r_value**2:.3f}")
                    continue
                mues_dia = muestras[muestras['D√≠a'] == dia].copy()
                mues_dia['Conc. Calculada'] = slope * mues_dia['Absorbancia'] + intercept
                resultados_muestras.append(mues_dia)
                dias_validos.append(dia)
            except Exception as e:
                st.error(f"Error en el D√≠a {dia}: {str(e)}")

    # An√°lisis de Est√°ndares
    st.subheader("üî¨ Resultados para Est√°ndares")
    col1, col2 = st.columns(2)
    with col1:
        grupos_intra = estandares.groupby(['D√≠a', 'Concentraci√≥n'])['Absorbancia']
        rsd_intra = (grupos_intra.std() / grupos_intra.mean() * 100).reset_index()
        fig, ax = plt.subplots(figsize=(8, 4))
        sns.boxplot(data=rsd_intra, x='Concentraci√≥n', y='Absorbancia', palette='Blues', ax=ax)
        ax.axhline(2, color='red', linestyle='--', label='L√≠mite ICH (2%)')
        ax.set_title("RSD Intraensayo por Concentraci√≥n")
        ax.set_ylabel("RSD (%)")
        ax.legend()
        st.pyplot(fig)
        max_rsd_intra = rsd_intra['Absorbancia'].max()
        st.metric("RSD M√°ximo Intraensayo", f"{max_rsd_intra:.2f}%",
                 delta="Cumple" if max_rsd_intra <= 2 else "No Cumple")
    with col2:
        grupos_inter = estandares.groupby('Concentraci√≥n')['Absorbancia']
        rsd_inter = (grupos_inter.std() / grupos_inter.mean() * 100).reset_index()
        fig, ax = plt.subplots(figsize=(8, 4))
        sns.lineplot(data=rsd_inter, x='Concentraci√≥n', y='Absorbancia',
                    marker='o', color='green', linewidth=2, ax=ax)
        ax.axhline(3, color='red', linestyle='--', label='L√≠mite ICH (3%)')
        ax.set_title("RSD Intermedio por Concentraci√≥n")
        ax.set_ylabel("RSD (%)")
        ax.legend()
        st.pyplot(fig)
        rsd_ponderado = (rsd_inter['Absorbancia'] * grupos_inter.mean()).sum() / grupos_inter.mean().sum()
        st.metric("RSD Ponderado Intermedio", f"{rsd_ponderado:.2f}%",
                 delta="Cumple" if rsd_ponderado <= 3 else "No Cumple")

    # Resumen Ejecutivo
    with st.expander("üìä Resumen", expanded=True):
        metricas = {
            'D√≠as Analizados': len(dias_validos),
            'RSD Intraensayo M√°ximo': f"{max_rsd_intra:.2f}%",
            'RSD Intermedio Ponderado': f"{rsd_ponderado:.2f}%",
            'Muestras V√°lidas': len(resultados_muestras) if resultados_muestras else 0,
            'Cumplimiento Global': "‚úÖ" if (max_rsd_intra <= 2 and rsd_ponderado <= 3) else "‚ùå"
        }
        st.json(metricas)
        
def calcular_exactitud(datos):
    """Calcula la exactitud mediante recuperaci√≥n seg√∫n ICH Q2 usando concentraci√≥n te√≥rica vs real."""
    # Validar columnas requeridas
    columnas_necesarias = ['D√≠a', 'Concentraci√≥n Te√≥rica', 'Concentraci√≥n Real']
    if not validar_columnas(datos, columnas_necesarias):
        return
    
    # Calcular porcentaje de recuperaci√≥n
    datos['Recuperaci√≥n (%)'] = (datos['Concentraci√≥n Real'] / datos['Concentraci√≥n Te√≥rica']) * 100
    
    # An√°lisis por d√≠a
    st.header("An√°lisis de Exactitud - ICH Q2 R1")
    
    # Crear pesta√±as para organizaci√≥n
    tab1, tab2, tab3 = st.tabs(["Resumen Estad√≠stico", "Distribuci√≥n de Recuperaciones", "Datos Detallados"])
    
    with tab1:
        # M√©tricas clave por d√≠a
        st.subheader("Estad√≠sticos por D√≠a")
        resumen = datos.groupby('D√≠a').agg(
            Muestras=('Recuperaci√≥n (%)', 'size'),
            Media=('Recuperaci√≥n (%)', lambda x: f"{x.mean():.2f}%"),
            DE=('Recuperaci√≥n (%)', lambda x: f"{x.std():.2f}%"),
            RSD=('Recuperaci√≥n (%)', lambda x: f"{(x.std()/x.mean())*100:.2f}%"),
            M√≠n=('Recuperaci√≥n (%)', lambda x: f"{x.min():.2f}%"),
            M√°x=('Recuperaci√≥n (%)', lambda x: f"{x.max():.2f}%")
        ).reset_index()
        
        # Evaluaci√≥n de criterios ICH
        resumen['Cumplimiento'] = datos.groupby('D√≠a').apply(
            lambda x: "‚úÖ" if (98 <= x['Recuperaci√≥n (%)'].mean() <= 102) and 
                            (x['Recuperaci√≥n (%)'].std() <= 3) else "‚ùå"
        ).values
        
        st.dataframe(
            resumen.style.apply(lambda x: ['background: #e6f4ea' if x.Cumplimiento == '‚úÖ' 
                                          else 'background: #fce8e6' for _ in x], axis=1)
        )
        
        # Leyenda de cumplimiento
        st.markdown("""
        **Criterios ICH Q2 R1:**
        - Media de recuperaci√≥n entre 98-102%
        - Desviaci√≥n est√°ndar ‚â§3%
        """)
    
    with tab2:
        # Gr√°fico de distribuci√≥n
        st.subheader("Distribuci√≥n de Recuperaciones")
        fig, ax = plt.subplots(figsize=(10, 6))
        
        # Boxplot por d√≠a
        sns.boxplot(data=datos, x='D√≠a', y='Recuperaci√≥n (%)', palette='viridis', ax=ax)
        ax.axhline(100, color='red', linestyle='--', linewidth=1, label='Objetivo 100%')
        ax.set_title("Distribuci√≥n de Porcentajes de Recuperaci√≥n por D√≠a")
        ax.set_ylim(85, 115)
        ax.legend()
        
        st.pyplot(fig)
        plt.close(fig)
        
        # Histograma combinado
        fig, ax = plt.subplots(figsize=(10, 6))
        sns.histplot(data=datos, x='Recuperaci√≥n (%)', bins=12, kde=True, 
                    hue='D√≠a', multiple='stack', palette='viridis')
        ax.set_title("Distribuci√≥n Global de Recuperaciones")
        st.pyplot(fig)
        plt.close(fig)
    
    with tab3:
        # Tabla detallada con formato condicional
        st.subheader("Datos Completos")
        st.dataframe(
            datos.style.format({
                'Concentraci√≥n Te√≥rica': '{:.4f}',
                'Concentraci√≥n Real': '{:.4f}',
                'Recuperaci√≥n (%)': '{:.2f}%'
            }).apply(lambda x: ['color: #2ecc71' if (x['Recuperaci√≥n (%)'] >= 98) and 
                              (x['Recuperaci√≥n (%)'] <= 102) else 'color: #e74c3c' 
                              for _ in x], axis=1)
        )
        
        # Bot√≥n de descarga
        generar_descarga(datos)

def validar_columnas(datos, columnas):
    """Valida la presencia de columnas requeridas en el dataset"""
    faltantes = [col for col in columnas if col not in datos.columns]
    if faltantes:
        st.error(f"Columnas faltantes: {', '.join(faltantes)}")
        return False
    return True

def generar_descarga(datos):
    """Genera archivo Excel descargable con los resultados"""
    output = BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        datos.to_excel(writer, index=False, sheet_name='Resultados')
    
    st.download_button(
        label="üì• Descargar Resultados Completos",
        data=output.getvalue(),
        file_name="exactitud_analitica.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        help="Descarga todos los resultados en formato Excel"
    )

def evaluar_robustez(datos):
    """Eval√∫a la robustez del m√©todo mediante an√°lisis estad√≠stico avanzado."""
    # Configuraci√≥n de estilo
    sns.set_theme(style="whitegrid", palette="pastel")
    plt.rcParams['axes.titleweight'] = 'bold'
    st.header("üß™ An√°lisis de Robustez - ICH Q2")

    # Validaci√≥n mejorada
    columnas_necesarias = ['Absorbancia', 'D√≠a', 'Concentraci√≥n', 'Tipo', 'Analista']
    if not validar_columnas(datos, columnas_necesarias):
        return

    with st.expander("üìö Metodolog√≠a", expanded=False):
        st.markdown("""
        **Criterios ICH Q2 para Robustez:**
        1. ANOVA con nivel de significancia Œ± = 0.05
        2. Tama√±o del efecto (Œ∑¬≤) < 0.1 para considerar robustez
        3. M√≠nimo 3 niveles por factor analizado
        4. Intervalos de confianza del 95% para medias
        """)

    # Selecci√≥n de factores
    factores = st.multiselect(
        "Selecciona factores a evaluar:",
        options=['D√≠a', 'Concentraci√≥n', 'Tipo', 'Analista'],
        default=['D√≠a']
    )

    # Contenedor principal
    with st.container():
        for factor in factores:
            st.subheader(f"üìå Factor: {factor}")
            col1, col2 = st.columns([1, 2])

            with col1:
                # An√°lisis estad√≠stico
                grupos = [g['Absorbancia'] for _, g in datos.groupby(factor)]
                
                if len(grupos) < 2:
                    st.error("Se requieren al menos 2 grupos para ANOVA")
                    continue
                
                # ANOVA
                f_stat, p_val = f_oneway(*grupos)
                
                # Tama√±o del efecto
                ss_total = np.sum((datos['Absorbancia'] - datos['Absorbancia'].mean())**2)
                eta_squared = f_stat * (len(grupos) - 1) / (len(datos) - len(grupos))
                
                # Resultados
                st.markdown("""
                **Resultados Estad√≠sticos:**
                - Estad√≠stico F: `{:.4f}`
                - Valor p: `{:.4f}`
                - Œ∑¬≤ (tama√±o efecto): `{:.3f}`
                """.format(f_stat, p_val, eta_squared))

                # Evaluaci√≥n de criterios
                criterio_p = p_val > 0.05
                criterio_eta = eta_squared < 0.1
                robustez = criterio_p and criterio_eta
                
                st.markdown(f"""
                **Interpretaci√≥n:**
                - Significancia estad√≠stica: {"‚úÖ No significativa" if criterio_p else "‚ùå Significativa"}
                - Tama√±o del efecto: {"‚úÖ Aceptable" if criterio_eta else "‚ùå Excesivo"}
                - **Conclusi√≥n:** {"üèÜ M√©todo Robusto" if robustez else "‚ö†Ô∏è Requiere atenci√≥n"}
                """)

            with col2:
                # Visualizaci√≥n avanzada
                fig, ax = plt.subplots(figsize=(8, 4))
                sns.boxplot(x=factor, y='Absorbancia', data=datos, 
                           width=0.6, linewidth=1.5, fliersize=4)
                
                # A√±adir media e intervalos
                mean_line = datos['Absorbancia'].mean()
                ax.axhline(mean_line, color='red', linestyle='--', 
                          label=f'Media Global: {mean_line:.2f}')
                
                # Formateo profesional
                ax.set_title(f"Distribuci√≥n por {factor}\n", fontsize=12)
                ax.set_xlabel(factor, fontweight='bold')
                ax.set_ylabel("Absorbancia", fontweight='bold')
                ax.legend()
                plt.xticks(rotation=45)
                st.pyplot(fig)

                # An√°lisis post-hoc si es necesario
                if not robustez:
                
                    tukey = pairwise_tukeyhsd(datos['Absorbancia'], datos[factor])
                    with st.expander("üîç An√°lisis Post-Hoc (Tukey)"):
                        st.text(str(tukey.summary()))

    # Secci√≥n adicional
    with st.expander("üìä Reporte Completo", expanded=False):
        st.subheader("üìà Tendencia Temporal")
        fig, ax = plt.subplots(figsize=(10, 4))
        sns.lineplot(data=datos, x='D√≠a', y='Absorbancia', 
                    hue='Concentraci√≥n', style='Tipo', 
                    markers=True, ci=95)
        ax.set_title("Tendencia de Absorbancia por D√≠a y Concentraci√≥n")
        st.pyplot(fig)
        plt.close(fig)  

def evaluar_estabilidad(datos):
    """
    Eval√∫a la estabilidad de soluciones por d√≠a seg√∫n ICH Q2 R1 para UV-Vis.
    Se consideran la concentraci√≥n te√≥rica y el analista como factores adicionales.
    
    Aspectos evaluados:
      - Preprocesamiento: conversi√≥n de fechas y columnas num√©ricas.
      - An√°lisis de Est√°ndares: 
          * ANOVA entre d√≠as y analistas.
          * C√°lculo de RSD por rango de concentraci√≥n (Bajo, Medio, Alto).
          * Gr√°ficos de tendencia y boxplots de Absorbancia.
          * Evaluaci√≥n de la pendiente de la tendencia (regresi√≥n lineal).
          * **An√°lisis de residuales:** Scatter y violin plots para detectar patrones no aleatorios.
      - An√°lisis de Muestras: Similar agrupaci√≥n por rango te√≥rico, gr√°ficos de tendencia y m√©tricas.
    """
    # Configuraci√≥n inicial
    st.header("üìä An√°lisis de Estabilidad / Robustez UV-Vis")
    sns.set_theme(style="whitegrid", palette="muted")
    
    # Validaci√≥n de columnas requeridas
    required_cols = ['D√≠a', 'Concentraci√≥n', 'Absorbancia', 'Tipo', 'Analista']
    if not all(col in datos.columns for col in required_cols):
        st.error(f"‚ùå Faltan columnas requeridas: {', '.join(required_cols)}")
        return

    try:
        # ============================================
        # 1. Preprocesamiento de Datos
        # ============================================
        with st.expander("üßπ Preprocesamiento de datos", expanded=False):
            df = datos.copy()
            # Convertir 'D√≠a' a datetime (formato dd/mm/YYYY)
            df['D√≠a'] = pd.to_datetime(df['D√≠a'], format='%d/%m/%Y', errors='coerce')
            # Verificar fechas inv√°lidas
            invalid_dates = df[df['D√≠a'].isna()]
            if not invalid_dates.empty:
                st.error("‚ö†Ô∏è Fechas inv√°lidas detectadas:")
                st.dataframe(invalid_dates)
                return
            # Calcular 'D√≠a_num' (d√≠as desde la primera medici√≥n)
            df['D√≠a_num'] = (df['D√≠a'] - df['D√≠a'].min()).dt.days + 1

            # Convertir columnas num√©ricas (reemplazando comas por puntos)
            numeric_cols = ['Concentraci√≥n', 'Absorbancia']
            for col in numeric_cols:
                df[col] = df[col].astype(str).str.replace(',', '.').astype(float)
            # Verificar que no haya valores no num√©ricos
            non_numeric = df[df[numeric_cols].isna().any(axis=1)]
            if not non_numeric.empty:
                st.error("‚ùå Valores no num√©ricos detectados:")
                st.dataframe(non_numeric)
                return
            
            st.success("‚úÖ Datos preprocesados correctamente")
            st.dataframe(df.head(), hide_index=True)

        # ============================================
        # 2. An√°lisis de Est√°ndares
        # ============================================
        estandares = df[df['Tipo'] == 'Est√°ndar']
        rangos = {
            'Bajo': (0, 0.33),
            'Medio': (0.34, 0.66),
            'Alto': (0.67, 1.0)
        }
        with st.expander("üî¨ An√°lisis de Est√°ndares", expanded=True):
            if not estandares.empty:
                # ANOVA: Evaluar efecto del d√≠a y del analista
                model = ols('Absorbancia ~ C(D√≠a_num) + C(Analista)', data=estandares).fit()
                anova_results = anova_lm(model, typ=2)
                st.markdown("#### Resultados ANOVA (Est√°ndares)")
                st.write(anova_results)
                
                # C√°lculo de RSD por rango de concentraci√≥n
                rsd_results = []
                for nombre, (min_conc, max_conc) in rangos.items():
                    subset = estandares[(estandares['Concentraci√≥n'] >= min_conc) & 
                                        (estandares['Concentraci√≥n'] <= max_conc)]
                    if not subset.empty:
                        rsd_series = (subset.groupby('D√≠a_num')['Absorbancia'].std(ddof=1) / 
                                      subset.groupby('D√≠a_num')['Absorbancia'].mean()) * 100
                        rsd_results.append({
                            'Rango': nombre,
                            'RSD Promedio': rsd_series.mean(),
                            'RSD M√°ximo': rsd_series.max()
                        })
                rsd_df = pd.DataFrame(rsd_results)
                st.markdown("#### Resumen de RSD en Est√°ndares por Rango de Concentraci√≥n")
                st.dataframe(rsd_df)
                
                # Gr√°ficos de Est√°ndares
                col1, col2 = st.columns(2)
                with col1:
                    fig1, ax1 = plt.subplots(figsize=(8,4))
                    sns.lineplot(data=estandares, x='D√≠a_num', y='Absorbancia', 
                                 hue='Concentraci√≥n', style='Analista',
                                 markers=True, dashes=False, ci=95, ax=ax1)
                    ax1.set_title("Tendencia de Absorbancia en Est√°ndares")
                    ax1.set_xlabel("D√≠as desde inicio")
                    ax1.set_ylabel("Absorbancia")
                    plt.tight_layout()
                    st.pyplot(fig1)
                with col2:
                    fig2, ax2 = plt.subplots(figsize=(8,4))
                    sns.boxplot(data=rsd_df, x='Rango', y='RSD M√°ximo', palette='Set2', ax=ax2)
                    ax2.axhline(2, color='red', linestyle='--', label='L√≠mite ICH (2%)')
                    ax2.set_title("RSD M√°ximo por Rango")
                    ax2.set_ylabel("RSD (%)")
                    ax2.legend()
                    plt.tight_layout()
                    st.pyplot(fig2)
                
                # Evaluar tendencia global (media diaria) mediante regresi√≥n lineal
                est_global = estandares.groupby('D√≠a_num')['Absorbancia'].mean().reset_index()
                slope, intercept = np.polyfit(est_global['D√≠a_num'], est_global['Absorbancia'], 1)
                st.metric("Pendiente de Tendencia (Est√°ndares)", f"{slope:.2e}",
                          delta="Estable" if abs(slope) < 0.01 else "Inestable")
                
                # ============================================
                # Gr√°ficos de Residuales en Est√°ndares
                # ============================================
                st.markdown("#### An√°lisis de Residuales en Est√°ndares")
                est_global['Estimado'] = slope * est_global['D√≠a_num'] + intercept
                est_global['Residuo'] = est_global['Absorbancia'] - est_global['Estimado']
                
                col_res, col_violin = st.columns(2)
                with col_res:
                    fig_res, ax_res = plt.subplots(figsize=(8,4))
                    sns.scatterplot(data=est_global, x='D√≠a_num', y='Residuo', ax=ax_res, color='blue')
                    ax_res.axhline(0, color='red', linestyle='--', label="Residuo = 0")
                    ax_res.set_title("Residuales (Scatter Plot)")
                    ax_res.set_xlabel("D√≠a")
                    ax_res.set_ylabel("Residuo")
                    ax_res.legend()
                    plt.tight_layout()
                    st.pyplot(fig_res)
                with col_violin:
                    fig_violin, ax_violin = plt.subplots(figsize=(8,4))
                    sns.violinplot(x=est_global['Residuo'], color='lightgreen', ax=ax_violin)
                    ax_violin.set_title("Distribuci√≥n de Residuales (Violin Plot)")
                    ax_violin.set_xlabel("Residuo")
                    plt.tight_layout()
                    st.pyplot(fig_violin)
            else:
                st.warning("No hay datos de est√°ndares para an√°lisis")
                
        # ============================================
        # 3. An√°lisis de Muestras (Concentraci√≥n Te√≥rica)
        # ============================================
        muestras = df[df['Tipo'] == 'Muestra']
        with st.expander("üß™ An√°lisis de Muestras", expanded=True):
            if not muestras.empty:
                rsd_results_muestras = []
                for nombre, (min_conc, max_conc) in rangos.items():
                    subset = muestras[(muestras['Concentraci√≥n'] >= min_conc) & 
                                      (muestras['Concentraci√≥n'] <= max_conc)]
                    if not subset.empty:
                        rsd_series = (subset.groupby('D√≠a_num')['Absorbancia'].std(ddof=1) / 
                                      subset.groupby('D√≠a_num')['Absorbancia'].mean()) * 100
                        rsd_results_muestras.append({
                            'Rango': nombre,
                            'RSD Promedio': rsd_series.mean(),
                            'RSD M√°ximo': rsd_series.max()
                        })
                rsd_muestras_df = pd.DataFrame(rsd_results_muestras)
                st.markdown("#### Resumen de RSD en Muestras por Rango Te√≥rico")
                st.dataframe(rsd_muestras_df)
                
                # Gr√°fico de tendencia de Absorbancia en Muestras
                fig3, ax3 = plt.subplots(figsize=(10,4))
                sns.lineplot(data=muestras, x='D√≠a_num', y='Absorbancia',
                             hue='Concentraci√≥n', style='Analista',
                             markers=True, dashes=False, ci=95, ax=ax3)
                ax3.set_title("Tendencia de Absorbancia en Muestras")
                ax3.set_xlabel("D√≠as desde inicio")
                plt.tight_layout()
                st.pyplot(fig3)
                
                # Evaluar estabilidad en Muestras mediante la pendiente de la tendencia
                muestras_global = muestras.groupby('D√≠a_num')['Absorbancia'].mean().reset_index()
                slope_m, intercept_m = np.polyfit(muestras_global['D√≠a_num'], muestras_global['Absorbancia'], 1)
                st.metric("Pendiente de Tendencia (Muestras)", f"{slope_m:.2e}",
                          delta="Estable" if abs(slope_m) < 0.01 else "Inestable")
            else:
                st.warning("No hay datos de muestras para an√°lisis")
                
    except Exception as e:
        st.error(f"üö® Error cr√≠tico: {str(e)}")

# L√≥gica principal para cada m√≥dulo
def procesar_archivo(datos, funcion_analisis):
    """Funci√≥n mejorada para manejar diferentes codificaciones y formatos"""
    if datos is not None:
        try:
            # Determinar tipo de archivo
            if datos.name.endswith('.csv'):
                # Lista de codificaciones comunes a probar
                codificaciones = ['utf-8', 'latin-1', 'iso-8859-1', 'cp1252', 'utf-16']
                
                for encoding in codificaciones:
                    try:
                        datos.seek(0)  # Reiniciar el cursor del archivo
                        df = pd.read_csv(datos, encoding=encoding)
                        st.success(f"Archivo le√≠do con codificaci√≥n: {encoding}")
                        return funcion_analisis(df)
                    except UnicodeDecodeError:
                        continue
                
                # Si ninguna codificaci√≥n funcion√≥
                st.error("Error de codificaci√≥n. Pruebe guardar el archivo en UTF-8")
                return

            elif datos.name.endswith(('.xlsx', '.xls')):
                df = pd.read_excel(datos)
                return funcion_analisis(df)

        except Exception as e:
            st.error(f"Error al procesar archivo: {str(e)}")
            st.error("Posibles soluciones:")
            st.markdown("""
                1. **Para archivos CSV:**
                   - Guarde el archivo con codificaci√≥n UTF-8
                   - Evite caracteres especiales como √±, acentos o s√≠mbolos
                   - Use Excel: *Archivo > Guardar Como > CSV UTF-8*
                
                2. **Para archivos Excel:**
                   - Verifique que no tenga f√≥rmulas o formatos complejos
                   - Guarde como .xlsx (formato moderno)
            """)
        
if modulo == "Linealidad y Rango":

    st.header("An√°lisis de Linealidad y Rango")
    st.info("""
        **Datos requeridos para este m√≥dulo:**
        - **Concentraci√≥n:** Concentraciones de las soluciones est√°ndar.
        - **Absorbancia:** Valores de absorbancia medidos.
        - **Tipo:** Identificar si es "Est√°ndar" o "Muestra".
        - **D√≠a:** Identificar el d√≠a de la medici√≥n.""")  
    img_path = imagenes_dir / "muestra.png"
    st.image(str(img_path), caption="Estructura requerida: Columnas 'D√≠a', 'Concentraci√≥n', 'Absorbancia', 'Tipo'")
    
    
    datos = st.file_uploader("Sube tu archivo:", type=['csv', 'xlsx'])
    procesar_archivo(datos, calcular_linealidad)
    

# M√≥dulo de LOD y LOQ
elif modulo == "L√≠mites de Detecci√≥n y Cuantificaci√≥n":
    st.header("C√°lculo de LOD y LOQ")
    st.info("""
        **Datos requeridos para este m√≥dulo:**
        - **Concentraci√≥n:** Concentraciones de las soluciones est√°ndar.
        - **Absorbancia:** Valores de absorbancia medidos.
        - **Tipo:** Identificar si es "Est√°ndar" o "Muestra".
        - **D√≠a:** D√≠a en que se realiz√≥ la medici√≥n.
        """)  
    
    img_path = imagenes_dir / "muestra.png"
    st.image(str(img_path), caption="Estructura requerida: Columnas 'D√≠a', 'Concentraci√≥n', 'Absorbancia', 'Tipo'")
    datos = st.file_uploader("Sube tu archivo:", type=['csv', 'xlsx'])
    if datos:
        datos_df = pd.read_csv(datos) if datos.name.endswith('.csv') else pd.read_excel(datos)
        procesar_archivo(datos, calcular_lod_loq)
        graficar_curva_calibracion_streamlit(datos_df)

# M√≥dulo de Precisi√≥n

elif modulo == "Precisi√≥n (Repetibilidad e Intermedia)":
    st.header("Evaluaci√≥n de Precisi√≥n")
    st.info(
        """
        **Datos requeridos para este m√≥dulo:**
        - **Absorbancia:** Datos de absorbancia agrupados por d√≠as y repeticiones.
        """
    )
    img_path = imagenes_dir / "muestra.png"
    st.image(str(img_path), caption="Estructura requerida: Columnas 'D√≠a', 'Concentraci√≥n', 'Absorbancia', 'Tipo'")
    datos = st.file_uploader("Sube tu archivo:", type=['csv', 'xlsx'])
    procesar_archivo(datos, calcular_precision)

# M√≥dulo de Exactitud
elif modulo == "Exactitud (Recuperaci√≥n)":
    st.header("C√°lculo de Exactitud")
    st.info(
        """
        **Datos requeridos para este m√≥dulo:**
        - **D√≠a:** D√≠a en que se realiz√≥ la medici√≥n.
        - **Concentraci√≥n Te√≥rica:** Concentraci√≥n fortificada conocida.
        - **Concentraci√≥n Medida:** Concentraci√≥n obtenida tras el an√°lisis experimental.
        """
    )
    img_path = imagenes_dir / "conc_exac.png"
    st.image(str(img_path), caption="Estructura requerida: Columnas 'Concentraci√≥n Teorica', 'Concentraci√≥n Real', 'D√≠a'")
    datos = st.file_uploader("Sube tu archivo:", type=['csv', 'xlsx'])
    procesar_archivo(datos, calcular_exactitud)

# M√≥dulo de Robustez
elif modulo == "Robustez":
    st.header("Evaluaci√≥n de Robustez")
    st.info("""
        **Datos requeridos para este m√≥dulo:**
        - **Factores variables:** Datos que representan condiciones variables del experimento.
        - **Resultados:** Datos de resultados obtenidos bajo dichas condiciones.
        """) 
    img_path = imagenes_dir / "muestra.png"
    st.image(str(img_path), caption="Estructura requerida: Columnas 'D√≠a', 'Concentraci√≥n', 'Absorbancia', 'Tipo'")
    datos = st.file_uploader("Sube tu archivo:", type=['csv', 'xlsx'])
    procesar_archivo(datos, evaluar_robustez)


# Llamada a la funci√≥n en el m√≥dulo de estabilidad
elif modulo == "Estabilidad":
    st.header("Evaluaci√≥n de Estabilidad")
    st.info("""
        **Datos requeridos:**
        - D√≠a | Concentraci√≥n | Tipo | Absorbancia
        """)  
    st.image(str(imagenes_dir / "muestra.png"), caption="Estructura requerida")
    
    datos = st.file_uploader("Sube tu archivo:", type=['csv', 'xlsx'])
    procesar_archivo(datos, evaluar_estabilidad)  # Usa la funci√≥n mejorada