import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import linregress, f_oneway
import streamlit as st
from io import BytesIO
from pathlib import Path
from matplotlib.figure import Figure

# Obtener la ruta del directorio actual
current_dir = Path(__file__).parent if "__file__" in locals() else Path.cwd()
imagenes_dir = current_dir / "img"

# Page Configuration
st.set_page_config(
    page_title="Validaci√≥n UV-Vis",
    page_icon="https://upload.wikimedia.org/wikipedia/commons/thumb/6/68/Escudo_CUCEI.svg/424px-Escudo_CUCEI.svg.png",
    layout="wide"  # Centers all content
)
st.markdown(
    """
    <style>
    body {
        background-color: black;
        color: white;
    }
    </style>
    """,
    unsafe_allow_html=True
)

# Custom CSS for title and footer
st.markdown("""
    <style>
    /* Title container styling */
    .title-container {
        display: flex;
        justify-content: center; /* Center the title and logo */
        align-items: center;
        gap: 10px;
        margin-bottom: 20px; /* Spacing below title */
    }
    .title-container img:first-child {
        width: 120px; /* Adjust first icon size */
        height: auto;
    }
    .title-container img:last-child {
        width: 200px; /* Adjust second icon size */
        height: auto;
    }

    /* Footer styling */
    .footer {
        position: fixed;
        bottom: 0;
        left: 0;
        width: 100%;
        background-color: rgba(0, 0, 0, 0.05); /* Light background */
        color: gray;
        text-align: center;
        padding: 5px 15px;
        font-size: small;
        opacity: 0.8;
    }
    </style>
""", unsafe_allow_html=True)

# Title with Icon
st.markdown("""
    <div class="title-container">
        <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/5f/Escudo_UdeG.svg/662px-Escudo_UdeG.svg.png" alt="UDG Logo">
        <h1>Validaci√≥n de M√©todos Anal√≠ticos - Espectrofotometr√≠a UV-Vis</h1>
        <img src="https://practicas.cucei.udg.mx/dist/imagenes/logo_cucei_blanco.png" alt="CUCEI Logo">
    </div>
""", unsafe_allow_html=True)

# Footer
st.markdown("""
    <div class="footer">
        2025 - Luis Angel Cardenas Medina
    </div>
""", unsafe_allow_html=True)


# M√≥dulos disponibles
modulo = st.sidebar.selectbox(
    "Selecciona el m√≥dulo de an√°lisis:",
    [
        "Linealidad y Rango",
        "L√≠mites de Detecci√≥n y Cuantificaci√≥n",
        "Exactitud (Recuperaci√≥n)",
        "Precisi√≥n (Repetibilidad e Intermedia)",
        "Robustez"
    ]
)

# Funciones generales

def previsualizar_datos(datos):
    """Previsualiza los datos cargados en la interfaz."""
    st.write("### Vista previa de los datos cargados:")
    st.write(datos.head())
    st.write(f"**N√∫mero de filas:** {datos.shape[0]}, **N√∫mero de columnas:** {datos.shape[1]}")

def validar_columnas(datos, columnas_necesarias):
    """Valida que las columnas requeridas est√©n presentes en el archivo subido."""
    columnas_faltantes = [col for col in columnas_necesarias if col not in datos.columns]
    if columnas_faltantes:
        st.error(f"El archivo no contiene las siguientes columnas necesarias: {', '.join(columnas_faltantes)}")
        return False
    return True

def calcular_regresion(datos_dia):
    """Calcula la regresi√≥n lineal y los par√°metros LOD y LOQ."""
    x, y = datos_dia['Concentraci√≥n'], datos_dia['Absorbancia']
    if len(x) < 2 or len(y) < 2:
        st.error("No hay suficientes datos para realizar la regresi√≥n. Se requieren al menos 2 puntos.")
        return None, None, None, None, None
    regresion = linregress(x, y)
    slope, intercept = regresion.slope, regresion.intercept
    residuals = y - (slope * x + intercept)
    std_dev = residuals.std()
    lod = (3.3 * std_dev) / slope if slope != 0 else None
    loq = (10 * std_dev) / slope if slope != 0 else None
    return slope, intercept, lod, loq, std_dev


def calcular_linealidad(datos):
    """Calcula la linealidad y rango del m√©todo considerando agrupaci√≥n por d√≠as."""
    # Configuraci√≥n inicial de estilo
    sns.set_theme(style="whitegrid", palette="muted")
    COLORS = ['#2ecc71', '#e74c3c']  # Verde y rojo para temas
    
    # Validaci√≥n mejorada
    columnas_necesarias = ['Concentraci√≥n', 'Absorbancia', 'Tipo', 'D√≠a']
    if not validar_columnas(datos, columnas_necesarias):
        return
    
    # Chequear valores num√©ricos
    if not np.issubdtype(datos['Concentraci√≥n'].dtype, np.number) or \
       not np.issubdtype(datos['Absorbancia'].dtype, np.number):
        st.error("Las columnas 'Concentraci√≥n' y 'Absorbancia' deben ser num√©ricas")
        return

    for dia, grupo_dia in datos.groupby('D√≠a'):
        with st.container():
            st.markdown(f"## üìÖ D√≠a {dia}")
            
            # Secci√≥n de est√°ndares
            estandar = grupo_dia[grupo_dia['Tipo'] == 'Est√°ndar']
            if estandar.empty:
                st.warning(f"‚ö†Ô∏è No se encontraron datos de Est√°ndar para el D√≠a {dia}.")
                continue
                
            # Procesamiento de datos
            estandar_promedio = estandar.groupby('Concentraci√≥n')['Absorbancia'].mean().reset_index()
            
            try:
                # C√°lculo de regresi√≥n con manejo de errores
                regresion = linregress(estandar_promedio['Concentraci√≥n'], estandar_promedio['Absorbancia'])
                slope = regresion.slope
                intercept = regresion.intercept
                r_value = regresion.rvalue
                p_value = regresion.pvalue
                predicciones = slope * estandar_promedio['Concentraci√≥n'] + intercept
                residuales = estandar_promedio['Absorbancia'] - predicciones
            except Exception as e:
                st.error(f"‚ùå Error en an√°lisis de regresi√≥n: {str(e)}")
                continue

            # Mostrar m√©tricas en columnas
            col1, col2 = st.columns(2)
            with col1:
                st.markdown("### üìä M√©tricas de Regresi√≥n")
                st.metric("Coeficiente de Determinaci√≥n (R¬≤)", f"{r_value**2:.4f}")
                st.metric("Pendiente (Slope)", f"{slope:.4f}")
                st.metric("Intercepto", f"{intercept:.4f}")
                
            with col2:
                st.markdown("### üìà Evaluaci√≥n de Calidad")
                st.metric("Coeficiente de Correlaci√≥n (R)", f"{r_value:.4f}")
                st.metric("Valor p", f"{p_value:.4e}")
                cumplimiento = r_value**2 >= 0.995
                st.metric("Cumplimiento ICH Q2(R¬≤ ‚â• 0.995)", 
                        "‚úÖ Cumple" if cumplimiento else "‚ùå No Cumple",
                        delta=f"{r_value**2 - 0.995:.4f}" if not cumplimiento else None)

            # Gr√°ficos profesionales con estilo unificado
            fig = plt.figure(figsize=(14, 6), facecolor='#f8f9fa')
            gs = fig.add_gridspec(1, 2)
            
            # Gr√°fico de Regresi√≥n
            ax1 = fig.add_subplot(gs[0, 0])
            sns.regplot(x=estandar_promedio['Concentraci√≥n'], y=estandar_promedio['Absorbancia'], 
                        ax=ax1, ci=95, scatter_kws={'s': 80, 'edgecolor': 'black', 'alpha': 0.8},
                        line_kws={'color': COLORS[0], 'lw': 2, 'alpha': 0.8})
            ax1.set_title(f"Regresi√≥n Lineal - D√≠a {dia}", fontsize=14, pad=20)
            ax1.set_xlabel("Concentraci√≥n (Œºg/mL)", fontsize=12)
            ax1.set_ylabel("Absorbancia (UA)", fontsize=12)
            ax1.grid(True, linestyle='--', alpha=0.7)
            
            # Anotaciones en el gr√°fico
            textstr = '\n'.join((
                f'$R^2 = {r_value**2:.4f}$',
                f'$y = {slope:.4f}x + {intercept:.4f}$'))
            ax1.text(0.05, 0.95, textstr, transform=ax1.transAxes,
                    fontsize=12, verticalalignment='top',
                    bbox=dict(boxstyle='round', facecolor='white', alpha=0.8))

            # Gr√°fico de Residuales
            ax2 = fig.add_subplot(gs[0, 1])
            residual_plot = sns.residplot(x=estandar_promedio['Concentraci√≥n'], y=residuales,
                                        ax=ax2, lowess=True, 
                                        scatter_kws={'s': 60, 'color': COLORS[1], 'edgecolor': 'black'},
                                        line_kws={'color': COLORS[0], 'lw': 2})
            ax2.axhline(0, color='black', linestyle='--', lw=1.5)
            ax2.set_title(f"An√°lisis de Residuales - D√≠a {dia}", fontsize=14, pad=20)
            ax2.set_xlabel("Concentraci√≥n (Œºg/mL)", fontsize=12)
            ax2.set_ylabel("Residuales", fontsize=12)
            ax2.grid(True, linestyle='--', alpha=0.7)
            
            # Destacar outliers
            outliers = np.abs(residuales) > 2 * residuales.std()
            if outliers.any():
                ax2.scatter(estandar_promedio['Concentraci√≥n'][outliers], 
                          residuales[outliers], 
                          s=100, edgecolor='black', 
                          facecolor='none', linewidth=1.5,
                          label='Outliers (¬±2œÉ)')
                ax2.legend()

            plt.tight_layout()
            st.pyplot(fig)
            plt.close(fig)

            # An√°lisis de muestras con mejor visualizaci√≥n
            muestra = grupo_dia[grupo_dia['Tipo'] == 'Muestra']
            if not muestra.empty:
                with st.expander(f"üß™ Resultados de Muestras - D√≠a {dia}", expanded=False):
                    try:
                        muestra['Concentraci√≥n Estimada'] = (muestra['Absorbancia'] - intercept) / slope
                        
                        # Gr√°fico de resultados
                        fig_m = plt.figure(figsize=(10, 5))
                        sns.scatterplot(x=muestra['Concentraci√≥n Estimada'], 
                                      y=muestra['Absorbancia'],
                                      s=100, edgecolor='black',
                                      color=COLORS[0], alpha=0.8)
                        plt.title(f"Concentraciones Estimadas - D√≠a {dia}", fontsize=14)
                        plt.xlabel("Concentraci√≥n Estimada (Œºg/mL)", fontsize=12)
                        plt.ylabel("Absorbancia (UA)", fontsize=12)
                        plt.grid(True, linestyle='--', alpha=0.5)
                        st.pyplot(fig_m)
                        plt.close(fig_m)
                        
                        # Tabla de resultados
                        st.dataframe(
                            muestra[['Absorbancia', 'Concentraci√≥n Estimada']]
                            .style.format("{:.4f}")
                            .highlight_between(subset=['Concentraci√≥n Estimada'], 
                                             color='#f8d7da',  # Rojo claro
                                             props='color: #721c24;',  # Texto oscuro
                                             axis=None)
                        )
                    except ZeroDivisionError:
                        st.error("Error: Pendiente cero, no se puede calcular concentraci√≥n")

            # Secci√≥n de interpretaci√≥n interactiva
            with st.expander("üîç Gu√≠a de Interpretaci√≥n", expanded=False):
                st.markdown("""
                **An√°lisis de Residuales:**
                - ‚úÖ **Distribuci√≥n aleatoria:** Buen ajuste del modelo
                - ‚ö†Ô∏è **Patr√≥n no lineal:** Considerar modelo no lineal
                - ‚ùå **Efecto embudo:** Varianza no constante
                - üìå **Outliers:** Verificar mediciones sospechosas

                **Criterios ICH Q2:**
                - $R^2 ‚â• 0.995$ para validaci√≥n
                - Residuales < ¬±2œÉ (95% confianza)
                """)

def calcular_lod_loq(datos):
    """Calcula LOD y LOQ con visualizaci√≥n mejorada y validaci√≥n extendida."""
    # Configuraci√≥n de estilo
    COLORS = ['#3498db', '#2ecc71', '#e74c3c']  # Azul, Verde, Rojo
    sns.set_theme(style="whitegrid", font_scale=0.95)
    
    # Validaci√≥n mejorada
    columnas_necesarias = ['D√≠a', 'Tipo', 'Concentraci√≥n', 'Absorbancia']
    if not validar_columnas(datos, columnas_necesarias):
        return
    
    # Chequear tipos num√©ricos
    if not np.issubdtype(datos['Concentraci√≥n'].dtype, np.number) or \
       not np.issubdtype(datos['Absorbancia'].dtype, np.number):
        st.error("‚ùå Las columnas 'Concentraci√≥n' y 'Absorbancia' deben ser num√©ricas")
        return

    datos_estandar = datos[datos['Tipo'] == 'Est√°ndar']
    if datos_estandar.empty:
        st.error("‚ùå No se encontraron datos de tipo 'Est√°ndar'")
        return

    with st.expander("üìä M√©todo de C√°lculo ICH Q2", expanded=True):
        st.markdown("""
        **F√≥rmulas aplicadas:**
        - $LOD = \\frac{3.3 \\times œÉ}{S}$  
        - $LOQ = \\frac{10 \\times œÉ}{S}$  
        Donde:
        - œÉ: Desviaci√≥n est√°ndar de los residuales
        - S: Pendiente de la curva de calibraci√≥n
        """)

    dias_unicos = datos_estandar['D√≠a'].unique()
    for dia in dias_unicos:
        with st.container():
            st.markdown(f"## üìÖ D√≠a {dia}")
            datos_dia = datos_estandar[datos_estandar['D√≠a'] == dia]
            
            if len(datos_dia) < 3:
                st.warning(f"‚ö†Ô∏è M√≠nimo 3 puntos requeridos para c√°lculo confiable (D√≠a {dia})")
                continue
                
            try:
                slope, intercept, lod, loq, std_dev = calcular_regresion(datos_dia)
                if slope is None:
                    st.error(f"‚ùå Pendiente inv√°lida en D√≠a {dia}")
                    continue
                
                # Mostrar m√©tricas en columnas
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("Pendiente (S)", f"{slope:.4f}")
                    st.metric("Desviaci√≥n Est√°ndar (œÉ)", f"{std_dev:.4f}")
                    
                with col2:
                    st.metric("L√≠mite de Detecci√≥n (LOD)", 
                            f"{lod:.4f}", 
                            help="3.3œÉ/S")
                    st.metric("L√≠mite de Cuantificaci√≥n (LOQ)", 
                            f"{loq:.4f}", 
                            help="10œÉ/S")
                
                with col3:
                    rango_dinamico = datos_dia['Concentraci√≥n'].max() / lod
                    st.metric("Rango Din√°mico", 
                            f"{rango_dinamico:.1f}:1", 
                            help="Relaci√≥n LOQ:LOD recomendada ‚â• 3:1")
                    st.metric("Cumplimiento ICH", 
                            "‚úÖ" if rango_dinamico >= 3 else "‚ùå", 
                            delta="‚â•3:1" if rango_dinamico >=3 else None)

                # Gr√°fico de datos brutos
                with st.expander(f"üîç Datos Detallados - D√≠a {dia}", expanded=False):
                    fig = plt.figure(figsize=(10, 4))
                    ax = fig.add_subplot(111)
                    sns.scatterplot(data=datos_dia, x='Concentraci√≥n', y='Absorbancia',
                                   s=100, color=COLORS[0], edgecolor='black',
                                   ax=ax, label='Datos Experimentales')
                    ax.set_title(f"Datos Crudos - D√≠a {dia}", fontsize=14)
                    ax.set_xlabel("Concentraci√≥n (Œºg/mL)", fontsize=12)
                    ax.set_ylabel("Absorbancia (UA)", fontsize=12)
                    ax.grid(True, linestyle='--', alpha=0.5)
                    st.pyplot(fig)
                    plt.close(fig)
                    
            except Exception as e:
                st.error(f"‚ùå Error en D√≠a {dia}: {str(e)}")
                continue

def graficar_curva_calibracion_streamlit(datos):
    """Grafica curva de calibraci√≥n con estilo profesional y anotaciones."""
    # Configuraci√≥n de estilo
    COLORS = ['#2ecc71', '#3498db', '#e74c3c']  # Verde, Azul, Rojo
    plt.style.use('seaborn-talk')
    
    # Validaci√≥n de datos
    columnas_necesarias = ['D√≠a', 'Tipo', 'Concentraci√≥n', 'Absorbancia']
    if not validar_columnas(datos, columnas_necesarias):
        return

    datos_estandar = datos[datos['Tipo'] == 'Est√°ndar']
    if datos_estandar.empty:
        st.error("‚ùå No se encontraron datos de calibraci√≥n")
        return

    dias_unicos = datos_estandar['D√≠a'].unique()
    for dia in dias_unicos:
        with st.container():
            st.markdown(f"## üìà Curva de Calibraci√≥n - D√≠a {dia}")
            datos_dia = datos_estandar[datos_estandar['D√≠a'] == dia]
            
            if len(datos_dia) < 3:
                st.warning(f"‚ö†Ô∏è M√≠nimo 3 puntos recomendados para curva confiable (D√≠a {dia})")
                continue
                
            try:
                slope, intercept, lod, loq, std_dev = calcular_regresion(datos_dia)
                if slope is None:
                    st.error(f"‚ùå Pendiente inv√°lida en D√≠a {dia}")
                    continue
                
                # Crear figura profesional
                fig = plt.figure(figsize=(10, 6), facecolor='#f8f9fa')
                ax = fig.add_subplot(111)
                
                # Gr√°fico principal
                sns.regplot(x=datos_dia['Concentraci√≥n'], y=datos_dia['Absorbancia'],
                           ax=ax, ci=95,
                           scatter_kws={'s': 80, 'color': COLORS[0], 'edgecolor': 'black', 'alpha': 0.8},
                           line_kws={'color': COLORS[1], 'lw': 2, 'alpha': 0.8})
                
                # L√≠neas de LOD/LOQ
                ax.axvline(lod, color=COLORS[2], linestyle='--', lw=2, alpha=0.8, label=f'LOD ({lod:.2f})')
                ax.axvline(loq, color=COLORS[1], linestyle='-.', lw=2, alpha=0.8, label=f'LOQ ({loq:.2f})')
                
                # Anotaciones profesionales
                textstr = '\n'.join((
                    f'$R^2 = {slope**2:.4f}$' if hasattr(slope, '__pow__') else '',
                    f'$y = {slope:.4f}x + {intercept:.4f}$',
                    f'œÉ = {std_dev:.4f}'))
                ax.text(0.05, 0.95, textstr, transform=ax.transAxes,
                       fontsize=12, verticalalignment='top',
                       bbox=dict(boxstyle='round', facecolor='white', alpha=0.8))
                
                # Estilo del gr√°fico
                ax.set_title(f"Curva de Calibraci√≥n - D√≠a {dia}", fontsize=16, pad=20)
                ax.set_xlabel("Concentraci√≥n (Œºg/mL)", fontsize=14)
                ax.set_ylabel("Absorbancia (UA)", fontsize=14)
                ax.grid(True, linestyle='--', alpha=0.5)
                ax.legend(loc='lower right', frameon=True, shadow=True)
                
                # Resaltar √°rea LOD/LOQ
                ax.axvspan(0, loq, facecolor='#f8d7da', alpha=0.3, label='Zona LOD/LOQ')
                
                st.pyplot(fig)
                plt.close(fig)
                
                # Tabla de datos adjunta
                with st.expander(f"üìã Datos de Calibraci√≥n - D√≠a {dia}"):
                    st.dataframe(
                        datos_dia[['Concentraci√≥n', 'Absorbancia']]
                        .style.format("{:.4f}")
                        .highlight_between(subset=['Concentraci√≥n'], 
                                         left=0, right=loq,
                                         color='#fff3cd')  # Amarillo claro
                    )
                    
            except Exception as e:
                st.error(f"‚ùå Error en D√≠a {dia}: {str(e)}")
                continue

def calcular_precision(datos):
    """Eval√∫a la precisi√≥n siguiendo la guideline ICH Q2 mediante el c√°lculo del RSD (Relative Standard Deviation)."""
    columnas_necesarias = ['D√≠a', 'Concentraci√≥n', 'Absorbancia', 'Tipo']
    if not validar_columnas(datos, columnas_necesarias):
        return

    datos_estandar = datos[datos['Tipo'] == 'Est√°ndar']
    datos_muestra = datos[datos['Tipo'] == 'Muestra']
    if datos_estandar.empty:
        st.error("No se encontraron datos de est√°ndares en el conjunto de datos.")
        return

    datos_muestra['Concentraci√≥n Real'] = np.nan
    for dia in datos['D√≠a'].unique():
        estandares_dia = datos_estandar[datos_estandar['D√≠a'] == dia]
        muestras_dia = datos_muestra[datos_muestra['D√≠a'] == dia].copy()
        if estandares_dia.empty:
            st.warning(f"No se encontraron est√°ndares para el d√≠a {dia}. Concentraciones no calculadas para este d√≠a.")
            continue

        try:
            X = estandares_dia['Absorbancia'].values.reshape(-1, 1)
            y = estandares_dia['Concentraci√≥n'].values
            slope, intercept, _, _, _ = linregress(estandares_dia['Absorbancia'], estandares_dia['Concentraci√≥n'])
            muestras_dia['Concentraci√≥n Real'] = slope * muestras_dia['Absorbancia'] + intercept
            datos_muestra.update(muestras_dia)
            pendiente, intercepto = slope, intercept
            st.write(f"**Curva de calibraci√≥n para el d√≠a {dia}:** Concentraci√≥n = {pendiente:.4f} * Absorbancia + {intercepto:.4f}")
        except Exception as e:
            st.error(f"Error ajustando la curva de calibraci√≥n para el d√≠a {dia}: {e}")

    for tipo, datos_tipo in [('Est√°ndar', datos_estandar), ('Muestra', datos_muestra)]:
        st.subheader(f"**Precisi√≥n para tipo: {tipo}**")
        grupos_intraensayo = datos_tipo.groupby(['D√≠a', 'Concentraci√≥n'])['Absorbancia']
        rsd_intraensayo = grupos_intraensayo.std() / grupos_intraensayo.mean() * 100
        st.write("**RSD por d√≠a y concentraci√≥n (Repetibilidad intraensayo):**")
        st.table(rsd_intraensayo.reset_index().rename(columns={'Absorbancia': 'RSD (%)'}))

        grupos_intermedio = datos_tipo.groupby('Concentraci√≥n')['Absorbancia']
        rsd_intermedio = grupos_intermedio.std() / grupos_intermedio.mean() * 100
        st.write("**RSD por concentraci√≥n (Precisi√≥n intermedia):**")
        st.table(rsd_intermedio.reset_index().rename(columns={'Absorbancia': 'RSD (%)'}))

        pesos = grupos_intermedio.mean()
        rsd_general = (rsd_intermedio * pesos / pesos.sum()).sum()
        st.write(f"**RSD General (Precisi√≥n total) para {tipo}:** {rsd_general:.2f}%")

        if rsd_general <= 3:
            st.success(f"{tipo}: Cumple con los criterios de precisi√≥n (RSD ‚â§ 3%).")
        else:
            st.error(f"{tipo}: No cumple con los criterios de precisi√≥n (RSD > 3%).")

    st.write("**Concentraciones reales calculadas para las muestras:**")
    st.table(datos_muestra[['D√≠a', 'Absorbancia', 'Concentraci√≥n Real']])

def calcular_exactitud(datos):
    """Calcula la exactitud mediante recuperaci√≥n usando curva de calibraci√≥n diaria seg√∫n ICH Q2."""
    # Validar columnas requeridas
    columnas_necesarias = ['D√≠a', 'Concentraci√≥n', 'Absorbancia', 'Tipo']
    if not validar_columnas(datos, columnas_necesarias):
        return
    
    # Separar est√°ndares y muestras
    estandares = datos[datos['Tipo'] == 'Est√°ndar']
    muestras = datos[datos['Tipo'] == 'Muestra']
    
    if estandares.empty:
        st.error("Error: No se encontraron datos de est√°ndares para generar la curva de calibraci√≥n")
        return
    
    # Calcular concentraciones reales para muestras
    muestras_calculadas = []
    for dia in datos['D√≠a'].unique():
        # Filtrar datos del d√≠a
        est_dia = estandares[estandares['D√≠a'] == dia]
        mues_dia = muestras[muestras['D√≠a'] == dia]
        
        # Validar est√°ndares del d√≠a
        if len(est_dia) < 2:
            st.warning(f"D√≠a {dia}: Insuficientes est√°ndares para generar curva. M√≠nimo 2 requeridos.")
            continue
            
        try:
            # Generar curva de calibraci√≥n
            slope, intercept, r_value, p_value, std_err = linregress(
                est_dia['Absorbancia'], 
                est_dia['Concentraci√≥n']
            )
            
            # Calcular concentraciones reales para muestras con redondeo
            mues_dia = mues_dia.copy()
            mues_dia['Concentraci√≥n Medida'] = (slope * mues_dia['Absorbancia'] + intercept).round(2)  # Redondeo a 2 decimales
            mues_dia['Recuperaci√≥n (%)'] = ((mues_dia['Concentraci√≥n Medida'] / mues_dia['Concentraci√≥n']) * 100).round(2)  # Redondeo a 2 decimales
            
            muestras_calculadas.append(mues_dia)
            
            # Mostrar par√°metros de la curva (manteniendo 4 decimales para precisi√≥n t√©cnica)
            st.subheader(f"D√≠a {dia} - Par√°metros de la curva")
            st.markdown(f"""
            - **Ecuaci√≥n:** y = {slope:.4f}x + {intercept:.4f}
            - **Coeficiente de determinaci√≥n (R¬≤):** {r_value**2:.4f}
            - **Error est√°ndar:** {std_err:.4f}
            """)
            
        except Exception as e:
            st.error(f"Error en d√≠a {dia}: {str(e)}")
            continue
    
    if not muestras_calculadas:
        st.error("No se pudo calcular ninguna concentraci√≥n. Verifica los datos de entrada.")
        return
    
    # Unificar todos los resultados
    resultados = pd.concat(muestras_calculadas)
    
    # An√°lisis de exactitud
    st.header("An√°lisis de Exactitud (ICH Q2)")
    
    # C√°lculo de m√©tricas por d√≠a con redondeo final
    resumen = resultados.groupby('D√≠a').agg(
        Muestras_analizadas=('Recuperaci√≥n (%)', 'size'),
        Media_Recuperaci√≥n=('Recuperaci√≥n (%)', lambda x: round(x.mean(), 2)),
        DE_Recuperaci√≥n=('Recuperaci√≥n (%)', lambda x: round(x.std(), 2)),
        M√≠nimo=('Recuperaci√≥n (%)', lambda x: round(x.min(), 2)),
        M√°ximo=('Recuperaci√≥n (%)', lambda x: round(x.max(), 2))
    ).reset_index()
    
    # Evaluaci√≥n de criterios ICH Q2
    resumen['Cumple_ICH'] = (
        (resumen['Media_Recuperaci√≥n'] >= 98) & 
        (resumen['Media_Recuperaci√≥n'] <= 102) & 
        (resumen['DE_Recuperaci√≥n'] <= 3)
    )
    
    # Mostrar resultados
    st.subheader("Resumen Estad√≠stico por D√≠a")
    st.dataframe(resumen.style.format({
        'Media_Recuperaci√≥n': '{:.2f}%',
        'DE_Recuperaci√≥n': '{:.2f}%',
        'M√≠nimo': '{:.2f}%',
        'M√°ximo': '{:.2f}%'
    }))
    
    # Detalle de recuperaciones
    st.subheader("Detalle de Muestras")
    st.dataframe(resultados[['D√≠a', 'Concentraci√≥n', 'Absorbancia', 'Concentraci√≥n Medida', 'Recuperaci√≥n (%)']]
                 .style.format({
                     'Concentraci√≥n Medida': '{:.2f}',  # Reducido a 2 decimales
                     'Recuperaci√≥n (%)': '{:.2f}%'
                 }))
    
    # Generar archivo descargable
    generar_descarga(resultados)

def validar_columnas(datos, columnas):
    """Valida la presencia de columnas requeridas en el dataset"""
    faltantes = [col for col in columnas if col not in datos.columns]
    if faltantes:
        st.error(f"Columnas faltantes: {', '.join(faltantes)}")
        return False
    return True

def generar_descarga(datos):
    """Genera archivo Excel descargable con los resultados"""
    output = BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        datos.to_excel(writer, index=False, sheet_name='Resultados')
    
    st.download_button(
        label="üì• Descargar Resultados Completos",
        data=output.getvalue(),
        file_name="exactitud_analitica.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        help="Descarga todos los resultados en formato Excel"
    )

def evaluar_robustez(datos):
    """Eval√∫a la robustez del m√©todo anal√≠tico mediante ANOVA."""
    columnas_necesarias = ['Absorbancia']
    if not validar_columnas(datos, columnas_necesarias):
        return

    factores_posibles = ['D√≠a', 'Concentraci√≥n', 'Tipo']
    factor = st.selectbox("Selecciona el factor a evaluar:", factores_posibles)
    if factor not in datos.columns:
        st.error(f"El factor '{factor}' no est√° en los datos.")
        return

    grupos = [grupo['Absorbancia'].values for _, grupo in datos.groupby(factor)]
    estadistico, p_value = f_oneway(*grupos)

    st.write(f"**Factor evaluado:** {factor}")
    st.write(f"**Estad√≠stico F:** {estadistico:.4f}")
    st.write(f"**Valor p:** {p_value:.4e}")

    if p_value > 0.05:
        st.success("No hay diferencias significativas (p > 0.05). El m√©todo es robusto.")
    else:
        st.error("Hay diferencias significativas (p ‚â§ 0.05). El m√©todo no es robusto.")

    st.write("**Gr√°fico de caja (Boxplot):**")
    plt.figure(figsize=(8, 5))
    sns.boxplot(x=factor, y='Absorbancia', data=datos)
    plt.title(f"Variabilidad de Absorbancia seg√∫n {factor}")
    st.pyplot(plt)

def evaluar_estabilidad(datos):
    """Eval√∫a la estabilidad de la soluci√≥n en el tiempo."""
    columnas_necesarias = ['Tiempo', 'Absorbancia']
    if not validar_columnas(datos, columnas_necesarias):
        return

    x = datos['Tiempo']
    y = datos['Absorbancia']
    slope, intercept, r_value, p_value, std_err = linregress(x, y)

    st.write(f"**Pendiente:** {slope:.4f}")
    st.write(f"**Intercepto:** {intercept:.4f}")
    st.write(f"**Coeficiente de determinaci√≥n (R¬≤):** {r_value**2:.4f}")

    if abs(slope) < 0.01:
        st.success("El m√©todo es estable en el tiempo (pendiente cercana a 0).")
    else:
        st.error("El m√©todo no es estable en el tiempo (pendiente alejada de 0).")

    plt.figure(figsize=(8, 5))
    sns.lineplot(x=x, y=y, marker='o')
    plt.title("Estabilidad de la Soluci√≥n")
    plt.xlabel("Tiempo")
    plt.ylabel("Absorbancia")
    st.pyplot(plt)

# L√≥gica principal para cada m√≥dulo
def procesar_archivo(datos, funcion_calculo):
    """Procesa el archivo subido y ejecuta la funci√≥n de c√°lculo correspondiente."""
    if datos:
        try:
            datos_df = pd.read_csv(datos) if datos.name.endswith('.csv') else pd.read_excel(datos)
            previsualizar_datos(datos_df)
            funcion_calculo(datos_df)
        except Exception as e:
            st.error(f"Error al procesar el archivo: {e}")

if modulo == "Linealidad y Rango":

    st.header("An√°lisis de Linealidad y Rango")
    st.info("""
        **Datos requeridos para este m√≥dulo:**
        - **Concentraci√≥n:** Concentraciones de las soluciones est√°ndar.
        - **Absorbancia:** Valores de absorbancia medidos.
        - **Tipo:** Identificar si es "Est√°ndar" o "Muestra".
        - **D√≠a:** Identificar el d√≠a de la medici√≥n.""")  
    img_path = imagenes_dir / "muestra.png"
    st.image(str(img_path), caption="Estructura requerida: Columnas 'D√≠a', 'Concentraci√≥n', 'Absorbancia', 'Tipo'")
    
    
    datos = st.file_uploader("Sube tu archivo:", type=['csv', 'xlsx'])
    procesar_archivo(datos, calcular_linealidad)

# M√≥dulo de LOD y LOQ
elif modulo == "L√≠mites de Detecci√≥n y Cuantificaci√≥n":
    st.header("C√°lculo de LOD y LOQ")
    st.info("""
        **Datos requeridos para este m√≥dulo:**
        - **Concentraci√≥n:** Concentraciones de las soluciones est√°ndar.
        - **Absorbancia:** Valores de absorbancia medidos.
        - **Tipo:** Identificar si es "Est√°ndar" o "Muestra".
        - **D√≠a:** D√≠a en que se realiz√≥ la medici√≥n.
        """)  
    
    img_path = imagenes_dir / "muestra.png"
    st.image(str(img_path), caption="Estructura requerida: Columnas 'D√≠a', 'Concentraci√≥n', 'Absorbancia', 'Tipo'")
    datos = st.file_uploader("Sube tu archivo:", type=['csv', 'xlsx'])
    if datos:
        datos_df = pd.read_csv(datos) if datos.name.endswith('.csv') else pd.read_excel(datos)
        procesar_archivo(datos, calcular_lod_loq)
        graficar_curva_calibracion_streamlit(datos_df)

# M√≥dulo de Precisi√≥n

elif modulo == "Precisi√≥n (Repetibilidad e Intermedia)":
    st.header("Evaluaci√≥n de Precisi√≥n")
    st.info(
        """
        **Datos requeridos para este m√≥dulo:**
        - **Absorbancia:** Datos de absorbancia agrupados por d√≠as y repeticiones.
        """
    )
    img_path = imagenes_dir / "muestra.png"
    st.image(str(img_path), caption="Estructura requerida: Columnas 'D√≠a', 'Concentraci√≥n', 'Absorbancia', 'Tipo'")
    datos = st.file_uploader("Sube tu archivo:", type=['csv', 'xlsx'])
    procesar_archivo(datos, calcular_precision)

# M√≥dulo de Exactitud
elif modulo == "Exactitud (Recuperaci√≥n)":
    st.header("C√°lculo de Exactitud")
    st.info(
        """
        **Datos requeridos para este m√≥dulo:**
        - **D√≠a:** D√≠a en que se realiz√≥ la medici√≥n.
        - **Concentraci√≥n Te√≥rica:** Concentraci√≥n fortificada conocida.
        - **Concentraci√≥n Medida:** Concentraci√≥n obtenida tras el an√°lisis experimental.
        """
    )
    img_path = imagenes_dir / "muestra.png"
    st.image(str(img_path), caption="Estructura requerida: Columnas 'D√≠a', 'Concentraci√≥n', 'Absorbancia', 'Tipo'")
    datos = st.file_uploader("Sube tu archivo:", type=['csv', 'xlsx'])
    procesar_archivo(datos, calcular_exactitud)

# M√≥dulo de Robustez
elif modulo == "Robustez":
    st.header("Evaluaci√≥n de Robustez")
    st.info("""
        **Datos requeridos para este m√≥dulo:**
        - **Factores variables:** Datos que representan condiciones variables del experimento.
        - **Resultados:** Datos de resultados obtenidos bajo dichas condiciones.
        """) 
    img_path = imagenes_dir / "muestra.png"
    st.image(str(img_path), caption="Estructura requerida: Columnas 'D√≠a', 'Concentraci√≥n', 'Absorbancia', 'Tipo'")
    datos = st.file_uploader("Sube tu archivo:", type=['csv', 'xlsx'])
    procesar_archivo(datos, evaluar_robustez)